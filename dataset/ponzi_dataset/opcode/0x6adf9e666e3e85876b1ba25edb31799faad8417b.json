# Stack: []
0x4	MSTORE(0x40, 0x60)
0xA	JUMPI(:label0, !CALLDATASIZE())

# Stack: []
0xD	PUSH(CALLDATALOAD(0x0))
0xE	PUSH(0x100000000000000000000000000000000000000000000000000000000)
0x2C	SWAP1
0x2D	PUSH(POP(@0xD) / POP(0x100000000000000000000000000000000000000000000000000000000))
0x2E	DUP1
0x38	JUMPI(:label2, 0x41C0E1B5 == POP(@0x2D))

# Stack: [@0x2D]
0x39	DUP1
0x43	JUMPI(:label4, 0x64F39B47 == POP(@0x2D))

:label0
# Stack: []
0x45	PUSH(:label1)

# Stack: [:label1]
0x4A	JUMP(POP(:label1))

:label1
# Stack: []
0x4C	STOP()

:label2
# Stack: [@0x2D]
0x52	JUMPI(0x0, CALLVALUE())

# Stack: [@0x2D]
0x53	PUSH(:label3)
0x59	JUMP(:label6)

:label3
# Stack: [@0x2D]
0x5B	STOP()

:label4
# Stack: [@0x2D]
0x5D	PUSH(:label5)
0x63	JUMP(:label8)

:label5
# Stack: [@0x2D]
0x65	STOP()

:label6
# Stack: [:label3 @0x2D]
0x67	PUSH(0x0)
0x69	PUSH(0x0)
0x6B	SWAP1
0x6C	PUSH(SLOAD(POP(0x0)))
0x6D	SWAP1
0x71	PUSH(0x100 ** POP(0x0))
0x72	SWAP1
0xBC	JUMPI(:label7, !(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & CALLER() == 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & POP(@0x6C) / POP(@0x71)))

# Stack: [:label3 @0x2D]
0xBD	PUSH(0x0)
0xBF	PUSH(0x0)
0xC1	SWAP1
0xC2	PUSH(SLOAD(POP(0x0)))
0xC3	SWAP1
0xC7	PUSH(0x100 ** POP(0x0))
0xC8	SWAP1
0xF6	SELFDESTRUCT(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & POP(@0xC2) / POP(@0xC7))

:label7
# Stack: [:label3 @0x2D]
0xF9	JUMP(POP(:label3))

:label8
# Stack: [:label5 @0x2D]
0xFB	PUSH(0x0)
0xFD	PUSH(0x1)
0xFF	PUSH(0x0)
0x101	SWAP1
0x102	PUSH(SLOAD(POP(0x1)))
0x103	SWAP1
0x107	PUSH(0x100 ** POP(0x0))
0x108	SWAP1
0x153	JUMPI(:label9, !!(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & CALLER() == 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & POP(@0x102) / POP(@0x107)))

# Stack: [0x0 :label5 @0x2D]
0x157	JUMP(0x0)

:label9
# Stack: [0x0 :label5 @0x2D]
0x169	JUMPI(:label11, !(CALLVALUE() == 0x56BC75E2D63100000))

# Stack: [0x0 :label5 @0x2D]
0x16A	PUSH(0x1)
0x16C	PUSH(0x0)
0x16E	SWAP1
0x16F	PUSH(SLOAD(POP(0x1)))
0x170	SWAP1
0x174	PUSH(0x100 ** POP(0x0))
0x175	SWAP1
0x1A2	PUSH(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & POP(@0x16F) / POP(@0x174))
0x1A3	PUSH(0x8FC)
0x1A6	PUSH(0xB6255DF5F50080000)
0x1B0	SWAP1
0x1B1	DUP2
0x1B3	PUSH(!POP(0xB6255DF5F50080000) * POP(0x8FC))
0x1B4	SWAP1
0x1B7	PUSH(MLOAD(0x40))
0x1B8	DUP1
0x1B9	SWAP1
0x1BA	POP()
0x1BF	PUSH(MLOAD(0x40))
0x1C0	DUP1
0x1C1	DUP3
0x1C3	DUP1
0x1C4	DUP4
0x1C5	DUP7
0x1C6	DUP7
0x1C7	PUSH(CALL(POP(@0x1B3), POP(@0x1A2), POP(0xB6255DF5F50080000), POP(@0x1BF), POP(@0x1B7) - POP(@0x1BF), POP(@0x1BF), 0x0))
0x1C8	SWAP4
0x1C9	POP()
0x1CA	POP()
0x1CB	POP()
0x1CC	POP()
0x1CD	SWAP1
0x1CE	POP()
0x1CF	DUP1
0x1D5	JUMPI(:label10, !!POP(@0x1C7))

# Stack: [@0x1C7 :label5 @0x2D]
0x1D9	JUMP(0x0)

:label10
# Stack: [@0x1C7 :label5 @0x2D]
0x1DE	JUMP(:label12)

:label11
# Stack: [0x0 :label5 @0x2D]
0x1E3	JUMP(0x0)

:label12
# Stack: [@0x1C7 :label5 @0x2D]
0x1E6	POP()
0x1E7	JUMP(POP(:label5))


