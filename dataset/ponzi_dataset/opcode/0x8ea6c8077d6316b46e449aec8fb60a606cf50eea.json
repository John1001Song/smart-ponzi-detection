# Stack: []
0x4	MSTORE(0x40, 0x60)
0xA	JUMPI(:label0, !CALLDATASIZE())

# Stack: []
0x13	PUSH(CALLDATALOAD(0x0) / 0x2 ** 0xE0)
0x19	DUP1
0x1E	JUMPI(:label2, POP(@0x13) == 0x3C889FE1)

# Stack: [@0x13]
0x1F	DUP1
0x29	JUMPI(:label3, 0x5FEE63C3 == POP(@0x13))

# Stack: [@0x13]
0x2A	DUP1
0x34	JUMPI(:label4, 0x677342CE == POP(@0x13))

:label0
# Stack: []
0x36	PUSH(:label5)
0x39	PUSH(0x0)
0x3B	PUSH(0x0)
0x4B	JUMPI(:label10, !(0x38D7EA4C68000 == CALLVALUE()))

# Stack: [0x0 0x0 :label5]
0x64	JUMPI(:label10, !(BALANCE(0x2 ** 0xA0 - 0x1 & ADDRESS()) > 0x71AFD498D0000))

# Stack: [0x0 0x0 :label5]
0x65	DUP1
0x66	PUSH(SLOAD(POP(0x0)))
0x69	DUP1
0x6A	PUSH(POP(@0x66) + 0x1)
0x6B	SWAP3
0x6C	PUSH(CALLER())
0x6D	SWAP2
0x6E	DUP5
0x6F	SWAP1
0x70	DUP2
0x76	JUMPI(0x2, !(POP(@0x6A) < POP(@0x66)))

# Stack: [@0x6A 0x0 @0x6C 0x0 @0x6A :label5]
0x77	DUP2
0x78	DUP1
0x79	MSTORE(POP(0x0), POP(0x0))
0x7C	DUP1
0x9F	PUSH(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 + POP(@0x6A) * 0x3)
0xA0	DUP1
0xB8	PUSH(~0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & SLOAD(POP(@0x9F)))
0xB9	SWAP1
0xBA	SWAP4
0xBB	PUSH(POP(@0x6C) | POP(@0xB8))
0xBC	SWAP1
0xBD	SWAP3
0xBE	SSTORE(POP(@0x9F), POP(@0xBB))
0xC3	MSTORE(0x40, 0xA0)
0xC4	PUSH(0x15)
0xC6	PUSH(0x60)
0xC8	SWAP1
0xC9	DUP2
0xCA	MSTORE(POP(0x60), POP(0x15))
0xEE	MSTORE(0x80, 0x6D61737465726C792063616C63756C617465643A200000000000000000000000)
0xEF	DUP2
0xF0	PUSH(SLOAD(POP(0x0)))
0xF1	SWAP1
0xF2	SWAP3
0xF3	POP()
0xF4	DUP5
0xF5	SWAP1
0xF6	DUP2
0xFC	JUMPI(0x2, !(POP(@0x6A) < POP(@0xF0)))

# Stack: [@0x6A 0x0 0x60 0x0 @0x6A :label5]
0xFD	POP()
0xFE	POP()
0xFF	POP()
0x123	DUP2
0x125	PUSH(POP(@0x6A) * 0x3 + 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E564)
0x126	DUP1
0x127	PUSH(SLOAD(POP(@0x125)))
0x128	DUP2
0x129	DUP4
0x12A	MSTORE(POP(0x0), POP(@0x125))
0x12B	PUSH(0x20)
0x12D	DUP1
0x12E	DUP5
0x12F	PUSH(SHA3(POP(0x0), POP(0x20)))
0x151	DUP4
0x152	SSTORE(POP(@0x125), 0x6D61737465726C792063616C63756C617465643A20000000000000000000002A)
0x153	PUSH(:label6)
0x156	SWAP3
0x157	PUSH(0x2)
0x15E	DUP1
0x165	PUSH(~0x0 + !(POP(@0x127) & 0x1) * 0x100)
0x166	SWAP1
0x167	SWAP2
0x16C	PUSH(0x1F + (POP(@0x127) & POP(@0x165)) / POP(0x2))
0x16D	SWAP2
0x16E	SWAP1
0x16F	SWAP2
0x171	DUP1
0x172	PUSH(POP(@0x12F) + POP(@0x16C) / POP(0x20))
0x173	SWAP1

:label1
# Stack: [[@0x12F | @0x182] @0x172 :label6 @0x125 0x0 @0x6A :label5]
0x175	DUP1
0x176	DUP3
0x17C	JUMPI(:label8, !(POP(@0x172) > POP()))

# Stack: [[@0x182 | @0x12F] @0x172 :label6 @0x125 0x0 @0x6A :label5]
0x17D	DUP5
0x17E	DUP2
0x17F	SSTORE(POP(), POP(0x0))
0x182	PUSH(0x1 + POP())
0x186	JUMP(:label1)

:label2
# Stack: [@0x13]
0x188	PUSH(:label11)
0x18D	PUSH(CALLDATALOAD(0x4))
0x18E	PUSH(0x0)
0x190	DUP1
0x191	PUSH(SLOAD(POP(0x0)))
0x192	DUP2
0x193	SWAP1
0x194	DUP2
0x19A	JUMPI(0x2, !(POP(@0x18D) < POP(@0x191)))

# Stack: [@0x18D 0x0 @0x18D :label11 @0x13]
0x19B	POP()
0x19C	DUP1
0x19D	MSTORE(POP(0x0), POP(0x0))
0x1A0	PUSH(0x3 * POP(@0x18D))
0x1C2	DUP1
0x1C4	PUSH(SLOAD(POP(@0x1A0) + 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E565))
0x1E6	DUP2
0x1F1	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(POP(@0x1A0) + 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563))
0x1F2	SWAP2
0x214	PUSH(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E564 + POP(@0x1A0))
0x215	SWAP1
0x216	DUP4
0x217	JUMP(POP(:label11))

:label3
# Stack: [@0x13]
0x219	PUSH(:label15)
0x21E	PUSH(SLOAD(0x1))
0x21F	DUP2
0x220	JUMP(POP(:label15))

:label4
# Stack: [@0x13]
0x222	PUSH(:label15)
0x227	PUSH(CALLDATALOAD(0x4))
0x228	PUSH(0x0)
0x22A	DUP1
0x22F	DUP2
0x235	JUMPI(:label17, !(POP(@0x227) > 0x1 + SLOAD(POP(0x0))))

# Stack: [0x0 @0x227 :label15 @0x13]
0x239	JUMP(:label18)

:label5
# Stack: []
0x23B	STOP()

:label6
# Stack: [@0x172 @0x125 0x0 @0x6A :label5]
0x23D	POP()
0x23E	POP()
0x23F	PUSH(0x1)
0x241	DUP1
0x242	PUSH(SLOAD(POP(0x1)))
0x24D	DUP1
0x24E	PUSH(POP(@0x242) + 0x56BC75E2D63100000)
0x24F	SWAP2
0x250	DUP3
0x251	SWAP1
0x252	SSTORE(POP(0x1), POP(@0x24E))
0x253	PUSH(:label9)
0x256	SWAP2
0x257	SWAP1
0x258	DUP2
0x259	SWAP1
0x25A	PUSH(0x2)
0x25C	PUSH(0x56BC75E2D63100001)
0x266	SWAP1
0x267	SWAP2
0x269	PUSH((POP(@0x242) + POP(0x56BC75E2D63100001)) / POP(0x2))

:label7
# Stack: [[@0x27C | @0x269] [@0x24E | @0x269 | @0x27C] @0x24E :label9 0x0 @0x6A :label5]
0x26B	DUP2
0x26C	DUP2
0x272	JUMPI(:label16, !(POP() < POP()))

# Stack: [[@0x269 | @0x27C] [@0x24E | @0x269 | @0x27C] @0x24E :label9 0x0 @0x6A :label5]
0x273	SWAP1
0x274	POP()
0x277	DUP1
0x278	DUP3
0x27A	DUP1
0x27C	PUSH((POP() + POP(@0x24E) / POP()) / 0x2)
0x280	JUMP(:label7)

:label8
# Stack: [[@0x182 | @0x12F] @0x172 :label6 @0x125 0x0 @0x6A :label5]
0x282	POP()
0x283	SWAP1
0x284	JUMP(POP(:label6))

:label9
# Stack: [[@0x269 | @0x24E | @0x27C] 0x0 @0x6A :label5]
0x286	PUSH(0x0)
0x28A	POP(0x0)
0x28B	DUP4
0x28C	DUP2
0x28E	DUP1
0x294	JUMPI(0x2, !(POP(@0x6A) < SLOAD(POP(0x0))))

# Stack: [@0x6A 0x0 [@0x27C | @0x269 | @0x24E] 0x0 @0x6A :label5]
0x295	POP()
0x296	POP()
0x297	DUP2
0x298	DUP1
0x299	MSTORE(POP(0x0), POP(0x0))
0x29A	PUSH(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E565)
0x2BB	PUSH(0x3)
0x2BD	DUP1
0x2BE	DUP5
0x2BF	PUSH(POP(@0x6A) * POP(0x3))
0x2C0	SWAP1
0x2C1	SWAP1
0x2C2	SWAP2
0x2C3	PUSH(POP(@0x2BF) + POP(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E565))
0x2C4	SWAP2
0x2C5	SWAP1
0x2C6	SWAP2
0x2C7	SSTORE(POP(@0x2C3), POP())
0x2C8	DUP2
0x2CF	JUMPI(:label10, !(SLOAD(POP(0x0)) > POP(0x3)))

# Stack: [0x0 @0x6A :label5]
0x2D0	DUP1
0x2D1	PUSH(SLOAD(POP(0x0)))
0x2D5	DUP1
0x2D6	PUSH(POP(@0x2D1) + ~0x2)
0x2D7	SWAP2
0x2D8	SWAP1
0x2D9	DUP3
0x2DA	SWAP1
0x2DB	DUP2
0x2E1	JUMPI(0x2, !(POP(@0x2D6) < POP(@0x2D1)))

# Stack: [@0x2D6 0x0 @0x2D6 @0x6A :label5]
0x2E2	POP()
0x2E5	DUP2
0x312	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 + POP(@0x2D6) * 0x3))
0x313	SWAP1
0x314	PUSH(0x71AFD498D0000)
0x31C	PUSH(0xA0)
0x31E	DUP3
0x31F	DUP2
0x320	DUP2
0x321	DUP2
0x322	DUP6
0x323	DUP9
0x324	DUP4
0x325	PUSH(CALL(POP(0x0), POP(@0x312), POP(0x71AFD498D0000), POP(0xA0), POP(0x0), POP(0xA0), POP(0x0)))
0x326	POP()
0x327	POP()
0x328	POP()
0x329	POP()
0x32A	POP()

:label10
# Stack: [[@0x2D6 | 0x0] [@0x6A | 0x0] :label5]
0x32C	POP()
0x32D	POP()
0x32E	JUMP(POP(:label5))

:label11
# Stack: [@0x1C4 @0x214 @0x1F1 :label11 @0x13]
0x330	PUSH(0x60)
0x332	DUP4
0x333	DUP2
0x334	MSTORE(POP(0x60), POP(@0x1F1))
0x335	PUSH(0xA0)
0x337	DUP2
0x338	SWAP1
0x339	MSTORE(POP(0xA0), POP(@0x1C4))
0x33A	PUSH(0x80)
0x33C	DUP2
0x33D	DUP2
0x33E	MSTORE(POP(0x80), POP(0x60))
0x33F	DUP4
0x340	PUSH(SLOAD(POP(@0x214)))
0x341	PUSH(0x2)
0x345	DUP1
0x34F	PUSH(~0x0 + 0x100 * !(POP(@0x340) & 0x1))
0x350	SWAP1
0x351	SWAP2
0x353	PUSH((POP(@0x340) & POP(@0x34F)) / POP(0x2))
0x354	PUSH(0xC0)
0x356	DUP1
0x357	SWAP1
0x358	MSTORE(POP(0xC0), POP(@0x353))
0x359	PUSH(0xE0)
0x35B	SWAP1
0x35C	DUP6
0x35D	SWAP1
0x35E	DUP1
0x363	JUMPI(:label14, !POP(@0x353))

# Stack: [@0x353 @0x214 0xE0 0x80 0x60 @0x1C4 @0x214 @0x1F1 :label11 @0x13]
0x364	DUP1
0x36B	JUMPI(:label12, 0x1F < POP(@0x353))

# Stack: [@0x353 @0x214 0xE0 0x80 0x60 @0x1C4 @0x214 @0x1F1 :label11 @0x13]
0x36C	PUSH(0x100)
0x36F	DUP1
0x370	DUP4
0x374	DUP3
0x375	MSTORE(POP(0xE0), SLOAD(POP(@0x214)) / POP(0x100) * POP(0x100))
0x376	SWAP2
0x379	PUSH(0x20 + POP(0xE0))
0x37A	SWAP2
0x37E	JUMP(:label14)

:label12
# Stack: [@0x353 @0x214 0xE0 0x80 0x60 @0x1C4 @0x214 @0x1F1 :label11 @0x13]
0x380	DUP3
0x381	PUSH(POP(0xE0) + POP(@0x353))
0x382	SWAP2
0x383	SWAP1
0x386	MSTORE(0x0, POP(@0x214))
0x38B	PUSH(SHA3(0x0, 0x20))
0x38C	SWAP1

:label13
# Stack: [[0xE0 | @0x399] [@0x38B | @0x395] @0x381 0x80 0x60 @0x1C4 @0x214 @0x1F1 :label11 @0x13]
0x38E	DUP2
0x390	DUP1
0x391	MSTORE(POP(), SLOAD(POP()))
0x392	SWAP1
0x395	PUSH(0x1 + POP())
0x396	SWAP1
0x399	PUSH(0x20 + POP())
0x39A	DUP1
0x39B	DUP4
0x3A0	JUMPI(:label13, POP(@0x381) > POP(@0x399))

# Stack: [@0x399 @0x395 @0x381 0x80 0x60 @0x1C4 @0x214 @0x1F1 :label11 @0x13]
0x3A1	DUP3
0x3A2	SWAP1
0x3A7	DUP2
0x3A8	PUSH(POP(@0x381) + (0x1F & POP(@0x399) - POP(@0x381)))
0x3A9	SWAP2

:label14
# Stack: [[@0x353 | @0x381] [@0x214 | @0x395] [@0x379 | @0x3A8 | 0xE0] 0x80 0x60 @0x1C4 @0x214 @0x1F1 :label11 @0x13]
0x3AB	POP()
0x3AC	POP()
0x3AD	SWAP5
0x3AE	POP()
0x3AF	POP()
0x3B0	POP()
0x3B1	POP()
0x3B2	POP()
0x3B5	PUSH(MLOAD(0x40))
0x3B6	DUP1
0x3B7	SWAP2
0x3B8	PUSH(POP() - POP(@0x3B5))
0x3B9	SWAP1
0x3BA	RETURN(POP(@0x3B5), POP(@0x3B8))

:label15
# Stack: [[0x0 | @0x405 | @0x21E] [@0x13 | :label15]]
0x3BC	PUSH(0x60)
0x3BE	SWAP1
0x3BF	DUP2
0x3C0	MSTORE(POP(0x60), POP())
0x3C1	PUSH(0x20)
0x3C3	SWAP1
0x3C4	RETURN(POP(0x60), POP(0x20))

:label16
# Stack: [[@0x27C | @0x269] [@0x27C | @0x269 | @0x24E] @0x24E :label9 0x0 @0x6A :label5]
0x3C6	POP()
0x3C7	SWAP2
0x3C8	SWAP1
0x3C9	POP()
0x3CA	JUMP(POP(:label9))

:label17
# Stack: [0x0 @0x227 :label15 @0x13]
0x3CC	PUSH(0x0)
0x3D0	POP(0x0)
0x3D1	DUP3
0x3D2	DUP2
0x3D4	DUP1
0x3DA	JUMPI(0x2, !(POP(@0x227) < SLOAD(POP(0x0))))

# Stack: [@0x227 0x0 0x0 @0x227 :label15 @0x13]
0x3DB	POP()
0x3DC	POP()
0x3DD	DUP1
0x3DE	MSTORE(POP(0x0), POP(0x0))
0x3E1	DUP1
0x405	PUSH(SLOAD(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E565 + POP(@0x227) * 0x3))

:label18
# Stack: [[0x0 | @0x405] @0x227 :label15 @0x13]
0x407	SWAP2
0x408	SWAP1
0x409	POP()
0x40A	JUMP(POP(:label15))


