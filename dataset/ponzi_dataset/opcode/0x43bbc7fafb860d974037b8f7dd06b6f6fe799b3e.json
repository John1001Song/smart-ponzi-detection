# Stack: []
0x4	MSTORE(0x40, 0x60)
0xA	JUMPI(:label0, !CALLDATASIZE())

# Stack: []
0x13	PUSH(CALLDATALOAD(0x0) / 0x2 ** 0xE0)
0x19	DUP1
0x1E	JUMPI(:label2, POP(@0x13) == 0x63BDE24)

# Stack: [@0x13]
0x1F	DUP1
0x29	JUMPI(:label3, 0x29652E86 == POP(@0x13))

# Stack: [@0x13]
0x2A	DUP1
0x34	JUMPI(:label4, 0x2DF05A3E == POP(@0x13))

# Stack: [@0x13]
0x35	DUP1
0x3F	JUMPI(:label5, 0x41CC0AA5 == POP(@0x13))

# Stack: [@0x13]
0x40	DUP1
0x4A	JUMPI(:label6, 0x992C15FC == POP(@0x13))

# Stack: [@0x13]
0x4B	DUP1
0x55	JUMPI(:label7, 0xCFF4D6CD == POP(@0x13))

# Stack: [@0x13]
0x56	DUP1
0x60	JUMPI(:label8, 0xDECE296F == POP(@0x13))

:label0
# Stack: []
0x62	PUSH(:label9)
0x65	PUSH(0x0)
0x71	PUSH(CALLVALUE() < 0x16345785D8A0000)
0x72	DUP1
0x76	JUMPI(:label1, POP(@0x71))

# Stack: [@0x71 0x0 :label9]
0x77	POP()
0x82	PUSH(CALLVALUE() > 0x8AC7230489E80000)

:label1
# Stack: [[@0x82 | @0x71] 0x0 :label9]
0x88	JUMPI(:label10, !POP())

# Stack: [0x0 :label9]
0x8C	JUMP(0x2)

:label2
# Stack: [@0x13]
0x8E	PUSH(:label16)
0x91	PUSH(0x8AC7230489E80000)
0x9A	DUP2
0x9B	JUMP(POP(:label16))

:label3
# Stack: [@0x13]
0x9D	PUSH(:label17)
0xA2	PUSH(CALLDATALOAD(0x4))
0xA3	PUSH(0x0)
0xA5	DUP1
0xA6	PUSH(SLOAD(POP(0x0)))
0xA7	DUP2
0xA8	SWAP1
0xA9	DUP2
0xAF	JUMPI(0x2, !(POP(@0xA2) < POP(@0xA6)))

# Stack: [@0xA2 0x0 @0xA2 :label17 @0x13]
0xB0	POP()
0xB1	DUP1
0xB2	MSTORE(POP(0x0), POP(0x0))
0xB5	PUSH(0x2 * POP(@0xA2))
0xD7	DUP1
0xD9	PUSH(SLOAD(POP(@0xB5) + 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563))
0xDA	PUSH(0x0)
0xDC	DUP1
0xE3	DUP1
0xE4	CODECOPY(POP(0x0), 0x30A, 0x20)
0xE5	DUP1
0xE6	PUSH(MLOAD(POP(0x0)))
0xE7	SWAP1
0xE8	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0xE9	SWAP1
0xEA	SWAP1
0xEB	SWAP2
0xED	PUSH(SLOAD(POP(@0xE6) + POP(@0xB5)))
0xF5	PUSH(0x2 ** 0xA0 - 0x1)
0xF6	SWAP2
0xF7	SWAP1
0xF8	SWAP2
0xF9	PUSH(POP(@0xF5) & POP(@0xD9))
0xFA	SWAP1
0xFB	DUP3
0xFC	JUMP(POP(:label17))

:label4
# Stack: [@0x13]
0xFE	PUSH(:label16)
0x103	PUSH(SLOAD(0x1))
0x104	DUP2
0x105	JUMP(POP(:label16))

:label5
# Stack: [@0x13]
0x107	PUSH(:label16)
0x10A	PUSH(0x7D)
0x10C	DUP2
0x10D	JUMP(POP(:label16))

:label6
# Stack: [@0x13]
0x10F	PUSH(:label16)
0x112	PUSH(0x16345785D8A0000)
0x11B	DUP2
0x11C	JUMP(POP(:label16))

:label7
# Stack: [@0x13]
0x11E	PUSH(:label16)
0x123	PUSH(SLOAD(0x2))
0x124	DUP2
0x125	JUMP(POP(:label16))

:label8
# Stack: [@0x13]
0x127	PUSH(:label16)
0x12A	PUSH(0x64)
0x12C	DUP2
0x12D	JUMP(POP(:label16))

:label9
# Stack: []
0x12F	STOP()

:label10
# Stack: [0x0 :label9]
0x131	DUP1
0x132	PUSH(SLOAD(POP(0x0)))
0x135	DUP1
0x136	PUSH(POP(@0x132) + 0x1)
0x137	DUP1
0x138	DUP4
0x139	SSTORE(POP(0x0), POP(@0x136))
0x13A	SWAP1
0x13B	SWAP2
0x13C	DUP2
0x13D	DUP4
0x13E	DUP1
0x13F	PUSH(!POP(@0x132))
0x140	DUP2
0x141	SWAP1
0x146	JUMPI(:label12, POP(@0x13F) > POP(@0x136))

# Stack: [@0x132 @0x136 0x0 @0x136 @0x132 :label9]
0x149	PUSH(0x2 * POP(@0x132))
0x14A	DUP1
0x14E	DUP2
0x151	MSTORE(0x0, POP(0x0))
0x156	PUSH(SHA3(0x0, 0x20))
0x157	SWAP1
0x158	DUP2
0x159	PUSH(POP(@0x156) + POP(@0x149))
0x15A	SWAP1
0x15B	PUSH(POP(@0x156) + 0x2 * POP(@0x136))
0x15C	PUSH(:label12)
0x15F	SWAP2
0x160	SWAP1

:label11
# Stack: [[@0x187 | @0x15B] @0x159 :label12 @0x136 0x0 @0x136 @0x132 :label9]
0x162	DUP1
0x163	DUP3
0x169	JUMPI(:label14, !(POP(@0x159) > POP()))

# Stack: [[@0x15B | @0x187] @0x159 :label12 @0x136 0x0 @0x136 @0x132 :label9]
0x16A	DUP1
0x183	DUP1
0x184	SSTORE(POP(), ~0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & SLOAD(POP()))
0x187	PUSH(0x1 + POP())
0x188	DUP5
0x189	DUP2
0x18A	SSTORE(POP(@0x187), POP(0x0))
0x18E	JUMP(:label11)

:label12
# Stack: [[@0x159 | @0x132] @0x136 0x0 @0x136 @0x132 :label9]
0x190	POP()
0x191	POP()
0x192	POP()
0x193	POP()
0x194	PUSH(CALLER())
0x195	PUSH(0x0)
0x199	POP(0x0)
0x19A	DUP3
0x19B	DUP2
0x19D	DUP1
0x1A3	JUMPI(0x2, !(POP(@0x132) < SLOAD(POP(0x0))))

# Stack: [@0x132 0x0 @0x194 @0x132 :label9]
0x1A4	SWAP1
0x1A7	MSTORE(0x0, POP(0x0))
0x1AC	PUSH(SHA3(0x0, 0x20))
0x1AD	SWAP1
0x1B4	POP(0x0)
0x1B7	PUSH(0x0 + 0x2 * POP(@0x132) + POP(@0x1AC))
0x1BD	PUSH(0x100 ** 0x0)
0x1BE	DUP2
0x1C0	DUP1
0x1CB	PUSH(~((0x2 ** 0xA0 - 0x1) * POP(@0x1BD)) & SLOAD(POP(@0x1B7)))
0x1CC	SWAP1
0x1CD	DUP4
0x1CF	PUSH(POP(@0x194) * POP(@0x1BD) | POP(@0x1CB))
0x1D0	SWAP1
0x1D1	SSTORE(POP(@0x1B7), POP(@0x1CF))
0x1D2	POP()
0x1D9	PUSH(CALLVALUE() * 0x7D / 0x64)
0x1DA	PUSH(0x0)
0x1DE	POP(0x0)
0x1DF	DUP3
0x1E0	DUP2
0x1E2	DUP1
0x1E8	JUMPI(0x2, !(POP(@0x132) < SLOAD(POP(0x0))))

# Stack: [@0x132 0x0 @0x1D9 @0x132 :label9]
0x1E9	SWAP1
0x1EC	MSTORE(0x0, POP(0x0))
0x1F1	PUSH(SHA3(0x0, 0x20))
0x1F2	SWAP1
0x1F9	POP(0x0)
0x1FC	PUSH(0x1 + 0x2 * POP(@0x132) + POP(@0x1F1))
0x1FF	POP(0x0)
0x200	DUP1
0x201	SWAP1
0x202	SSTORE(POP(@0x1FC), POP(@0x1D9))
0x203	POP()

:label13
# Stack: [@0x132 :label9]
0x207	PUSH(SLOAD(0x1))
0x208	PUSH(0x0)
0x20A	DUP1
0x20B	PUSH(SLOAD(POP(0x0)))
0x216	PUSH(BALANCE(0x2 ** 0xA0 - 0x1 & ADDRESS()))
0x217	SWAP2
0x218	SWAP1
0x219	DUP2
0x21F	JUMPI(0x2, !(POP(@0x207) < POP(@0x20B)))

# Stack: [@0x207 0x0 @0x216 @0x132 :label9]
0x220	SWAP1
0x221	DUP1
0x222	MSTORE(POP(0x0), POP(0x0))
0x226	PUSH(0x0)
0x228	DUP1
0x22F	DUP1
0x230	CODECOPY(POP(0x0), 0x30A, 0x20)
0x231	DUP1
0x232	PUSH(MLOAD(POP(0x0)))
0x233	SWAP1
0x234	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x23C	JUMPI(:label15, !(SLOAD(POP(@0x232) + 0x2 * POP(@0x207)) < POP(@0x216)))

# Stack: [@0x132 :label9]
0x23F	PUSH(SLOAD(0x1))
0x240	PUSH(0x0)
0x242	DUP1
0x243	PUSH(SLOAD(POP(0x0)))
0x244	SWAP1
0x245	SWAP2
0x246	SWAP1
0x247	DUP2
0x24D	JUMPI(0x2, !(POP(@0x23F) < POP(@0x243)))

# Stack: [@0x23F 0x0 @0x132 :label9]
0x24E	PUSH(0x2)
0x250	DUP1
0x251	PUSH(SLOAD(POP(0x2)))
0x252	SWAP2
0x253	DUP2
0x255	PUSH(0x0)
0x257	DUP1
0x25E	DUP1
0x25F	CODECOPY(POP(0x0), 0x30A, 0x20)
0x260	DUP1
0x261	PUSH(MLOAD(POP(0x0)))
0x262	SWAP1
0x263	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x265	PUSH(SLOAD(POP(@0x261) + POP(0x2) * POP(@0x23F)))
0x266	SWAP1
0x267	SWAP2
0x268	PUSH(POP(@0x251) + POP(@0x265))
0x269	SWAP1
0x26A	SSTORE(POP(0x2), POP(@0x268))
0x26D	PUSH(SLOAD(0x1))
0x26E	DUP2
0x270	DUP1
0x276	JUMPI(0x2, !(POP(@0x26D) < SLOAD(POP(0x0))))

# Stack: [@0x26D 0x0 @0x132 :label9]
0x29B	PUSH(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 + 0x2 * POP(@0x26D))
0x29C	SWAP1
0x29F	PUSH(SLOAD(0x1))
0x2A0	DUP2
0x2A1	PUSH(SLOAD(POP(0x0)))
0x2A2	SWAP3
0x2AC	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(POP(@0x29B)))
0x2AD	SWAP3
0x2AE	DUP3
0x2AF	SWAP2
0x2B0	SWAP1
0x2B1	DUP2
0x2B7	JUMPI(0x2, !(POP(@0x29F) < POP(@0x2A1)))

# Stack: [@0x29F 0x0 0x0 @0x2AC @0x132 :label9]
0x2BA	PUSH(MLOAD(0x40))
0x2BB	PUSH(0x2)
0x2BD	SWAP2
0x2BE	SWAP1
0x2BF	SWAP2
0x2C1	PUSH(0x0)
0x2C3	DUP1
0x2CA	DUP1
0x2CB	CODECOPY(POP(0x0), 0x30A, 0x20)
0x2CC	DUP1
0x2CD	PUSH(MLOAD(POP(0x0)))
0x2CE	SWAP1
0x2CF	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x2D1	PUSH(SLOAD(POP(@0x2CD) + POP(0x2) * POP(@0x29F)))
0x2D2	SWAP2
0x2D3	DUP2
0x2D4	DUP2
0x2D5	DUP2
0x2D6	DUP6
0x2D7	DUP9
0x2D8	DUP4
0x2D9	PUSH(CALL(POP(0x0), POP(@0x2AC), POP(@0x2D1), POP(@0x2BA), POP(0x0), POP(@0x2BA), POP(0x0)))
0x2DA	POP()
0x2DB	POP()
0x2DC	PUSH(0x1)
0x2DE	DUP1
0x2E0	DUP1
0x2E1	PUSH(POP(0x1) + SLOAD(POP(0x1)))
0x2E2	SWAP1
0x2E3	SSTORE(POP(0x1), POP(@0x2E1))
0x2E4	POP()
0x2E5	PUSH(:label13)
0x2E8	SWAP2
0x2E9	POP()
0x2EA	POP()
0x2EB	JUMP(POP(:label13))

:label14
# Stack: [[@0x187 | @0x15B] @0x159 :label12 @0x136 0x0 @0x136 @0x132 :label9]
0x2ED	POP()
0x2EE	SWAP1
0x2EF	JUMP(POP(:label12))

:label15
# Stack: [@0x132 :label9]
0x2F1	POP()
0x2F2	JUMP(POP(:label9))

:label16
# Stack: [[0x7D | @0x103 | 0x8AC7230489E80000 | 0x64 | @0x123 | 0x16345785D8A0000] [:label16 | :label16 | :label16 | :label16 | :label16 | :label16] @0x13]
0x2F4	PUSH(0x60)
0x2F6	SWAP1
0x2F7	DUP2
0x2F8	MSTORE(POP(0x60), POP())
0x2F9	PUSH(0x20)
0x2FB	SWAP1
0x2FC	RETURN(POP(0x60), POP(0x20))

:label17
# Stack: [@0xED @0xF9 :label17 @0x13]
0x2FE	PUSH(0x60)
0x300	SWAP2
0x301	DUP3
0x302	MSTORE(POP(0x60), POP(@0xF9))
0x305	MSTORE(0x80, POP(@0xED))
0x306	PUSH(0x40)
0x308	SWAP1
0x309	RETURN(POP(0x60), POP(0x40))


