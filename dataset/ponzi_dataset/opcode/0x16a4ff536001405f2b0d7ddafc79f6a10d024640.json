# Stack: []
0x4	MSTORE(0x40, 0x60)
0xA	JUMPI(:label0, !CALLDATASIZE())

# Stack: []
0x13	PUSH(CALLDATALOAD(0x0) / 0x2 ** 0xE0)
0x19	DUP1
0x1E	JUMPI(:label1, POP(@0x13) == 0x29652E86)

# Stack: [@0x13]
0x1F	DUP1
0x29	JUMPI(:label2, 0x2DF05A3E == POP(@0x13))

# Stack: [@0x13]
0x2A	DUP1
0x34	JUMPI(:label3, 0x509D8C72 == POP(@0x13))

# Stack: [@0x13]
0x35	DUP1
0x3F	JUMPI(:label4, 0xCFF4D6CD == POP(@0x13))

:label0
# Stack: []
0x41	PUSH(:label5)
0x44	PUSH(0x0)
0x55	JUMPI(:label6, !(CALLVALUE() < 0xC80FEB9EEA08000))

# Stack: [0x0 :label5]
0x59	JUMP(0x2)

:label1
# Stack: [@0x13]
0x5B	PUSH(:label12)
0x60	PUSH(CALLDATALOAD(0x4))
0x61	PUSH(0x0)
0x63	DUP1
0x64	PUSH(SLOAD(POP(0x0)))
0x65	DUP2
0x66	SWAP1
0x67	DUP2
0x6D	JUMPI(0x2, !(POP(@0x60) < POP(@0x64)))

# Stack: [@0x60 0x0 @0x60 :label12 @0x13]
0x6E	POP()
0x6F	DUP1
0x70	MSTORE(POP(0x0), POP(0x0))
0x73	PUSH(0x2 * POP(@0x60))
0x95	DUP1
0x97	PUSH(SLOAD(POP(@0x73) + 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563))
0x98	PUSH(0x0)
0x9A	DUP1
0xA1	DUP1
0xA2	CODECOPY(POP(0x0), 0x2BA, 0x20)
0xA3	DUP1
0xA4	PUSH(MLOAD(POP(0x0)))
0xA5	SWAP1
0xA6	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0xA7	SWAP1
0xA8	SWAP1
0xA9	SWAP2
0xAB	PUSH(SLOAD(POP(@0xA4) + POP(@0x73)))
0xB3	PUSH(0x2 ** 0xA0 - 0x1)
0xB4	SWAP2
0xB5	SWAP1
0xB6	SWAP2
0xB7	PUSH(POP(@0xB3) & POP(@0x97))
0xB8	SWAP1
0xB9	DUP3
0xBA	JUMP(POP(:label12))

:label2
# Stack: [@0x13]
0xBC	PUSH(:label13)
0xC1	PUSH(SLOAD(0x1))
0xC2	DUP2
0xC3	JUMP(POP(:label13))

:label3
# Stack: [@0x13]
0xC5	PUSH(:label13)
0xC8	PUSH(0xC80FEB9EEA08000)
0xD1	DUP2
0xD2	JUMP(POP(:label13))

:label4
# Stack: [@0x13]
0xD4	PUSH(:label13)
0xD9	PUSH(SLOAD(0x2))
0xDA	DUP2
0xDB	JUMP(POP(:label13))

:label5
# Stack: []
0xDD	STOP()

:label6
# Stack: [0x0 :label5]
0xDF	DUP1
0xE0	PUSH(SLOAD(POP(0x0)))
0xE3	DUP1
0xE4	PUSH(POP(@0xE0) + 0x1)
0xE5	DUP1
0xE6	DUP4
0xE7	SSTORE(POP(0x0), POP(@0xE4))
0xE8	SWAP1
0xE9	SWAP2
0xEA	DUP2
0xEB	DUP4
0xEC	DUP1
0xED	PUSH(!POP(@0xE0))
0xEE	DUP2
0xEF	SWAP1
0xF4	JUMPI(:label8, POP(@0xED) > POP(@0xE4))

# Stack: [@0xE0 @0xE4 0x0 @0xE4 @0xE0 :label5]
0xF7	PUSH(0x2 * POP(@0xE0))
0xF8	DUP1
0xFC	DUP2
0xFF	MSTORE(0x0, POP(0x0))
0x104	PUSH(SHA3(0x0, 0x20))
0x105	SWAP1
0x106	DUP2
0x107	PUSH(POP(@0x104) + POP(@0xF7))
0x108	SWAP1
0x109	PUSH(POP(@0x104) + 0x2 * POP(@0xE4))
0x10A	PUSH(:label8)
0x10D	SWAP2
0x10E	SWAP1

:label7
# Stack: [[@0x109 | @0x135] @0x107 :label8 @0xE4 0x0 @0xE4 @0xE0 :label5]
0x110	DUP1
0x111	DUP3
0x117	JUMPI(:label10, !(POP(@0x107) > POP()))

# Stack: [[@0x109 | @0x135] @0x107 :label8 @0xE4 0x0 @0xE4 @0xE0 :label5]
0x118	DUP1
0x131	DUP1
0x132	SSTORE(POP(), ~0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & SLOAD(POP()))
0x135	PUSH(0x1 + POP())
0x136	DUP5
0x137	DUP2
0x138	SSTORE(POP(@0x135), POP(0x0))
0x13C	JUMP(:label7)

:label8
# Stack: [[@0x107 | @0xE0] @0xE4 0x0 @0xE4 @0xE0 :label5]
0x13E	POP()
0x13F	POP()
0x140	POP()
0x141	POP()
0x142	PUSH(CALLER())
0x143	PUSH(0x0)
0x147	POP(0x0)
0x148	DUP3
0x149	DUP2
0x14B	DUP1
0x151	JUMPI(0x2, !(POP(@0xE0) < SLOAD(POP(0x0))))

# Stack: [@0xE0 0x0 @0x142 @0xE0 :label5]
0x152	SWAP1
0x155	MSTORE(0x0, POP(0x0))
0x15A	PUSH(SHA3(0x0, 0x20))
0x15B	SWAP1
0x162	POP(0x0)
0x165	PUSH(0x0 + 0x2 * POP(@0xE0) + POP(@0x15A))
0x16B	PUSH(0x100 ** 0x0)
0x16C	DUP2
0x16E	DUP1
0x179	PUSH(~((0x2 ** 0xA0 - 0x1) * POP(@0x16B)) & SLOAD(POP(@0x165)))
0x17A	SWAP1
0x17B	DUP4
0x17D	PUSH(POP(@0x142) * POP(@0x16B) | POP(@0x179))
0x17E	SWAP1
0x17F	SSTORE(POP(@0x165), POP(@0x17D))
0x180	POP()
0x181	PUSH(0x8AC7230489E80000)
0x18A	PUSH(0x0)
0x18E	POP(0x0)
0x18F	DUP3
0x190	DUP2
0x192	DUP1
0x198	JUMPI(0x2, !(POP(@0xE0) < SLOAD(POP(0x0))))

# Stack: [@0xE0 0x0 0x8AC7230489E80000 @0xE0 :label5]
0x199	SWAP1
0x19C	MSTORE(0x0, POP(0x0))
0x1A1	PUSH(SHA3(0x0, 0x20))
0x1A2	SWAP1
0x1A9	POP(0x0)
0x1AC	PUSH(0x1 + 0x2 * POP(@0xE0) + POP(@0x1A1))
0x1AF	POP(0x0)
0x1B0	DUP1
0x1B1	SWAP1
0x1B2	SSTORE(POP(@0x1AC), POP(0x8AC7230489E80000))
0x1B3	POP()

:label9
# Stack: [@0xE0 :label5]
0x1B7	PUSH(SLOAD(0x1))
0x1B8	PUSH(0x0)
0x1BA	DUP1
0x1BB	PUSH(SLOAD(POP(0x0)))
0x1C6	PUSH(BALANCE(0x2 ** 0xA0 - 0x1 & ADDRESS()))
0x1C7	SWAP2
0x1C8	SWAP1
0x1C9	DUP2
0x1CF	JUMPI(0x2, !(POP(@0x1B7) < POP(@0x1BB)))

# Stack: [@0x1B7 0x0 @0x1C6 @0xE0 :label5]
0x1D0	SWAP1
0x1D1	DUP1
0x1D2	MSTORE(POP(0x0), POP(0x0))
0x1D6	PUSH(0x0)
0x1D8	DUP1
0x1DF	DUP1
0x1E0	CODECOPY(POP(0x0), 0x2BA, 0x20)
0x1E1	DUP1
0x1E2	PUSH(MLOAD(POP(0x0)))
0x1E3	SWAP1
0x1E4	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x1EC	JUMPI(:label11, !(SLOAD(POP(@0x1E2) + 0x2 * POP(@0x1B7)) < POP(@0x1C6)))

# Stack: [@0xE0 :label5]
0x1EF	PUSH(SLOAD(0x1))
0x1F0	PUSH(0x0)
0x1F2	DUP1
0x1F3	PUSH(SLOAD(POP(0x0)))
0x1F4	SWAP1
0x1F5	SWAP2
0x1F6	SWAP1
0x1F7	DUP2
0x1FD	JUMPI(0x2, !(POP(@0x1EF) < POP(@0x1F3)))

# Stack: [@0x1EF 0x0 @0xE0 :label5]
0x1FE	PUSH(0x2)
0x200	DUP1
0x201	PUSH(SLOAD(POP(0x2)))
0x202	SWAP2
0x203	DUP2
0x205	PUSH(0x0)
0x207	DUP1
0x20E	DUP1
0x20F	CODECOPY(POP(0x0), 0x2BA, 0x20)
0x210	DUP1
0x211	PUSH(MLOAD(POP(0x0)))
0x212	SWAP1
0x213	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x215	PUSH(SLOAD(POP(@0x211) + POP(0x2) * POP(@0x1EF)))
0x216	SWAP1
0x217	SWAP2
0x218	PUSH(POP(@0x201) + POP(@0x215))
0x219	SWAP1
0x21A	SSTORE(POP(0x2), POP(@0x218))
0x21D	PUSH(SLOAD(0x1))
0x21E	DUP2
0x220	DUP1
0x226	JUMPI(0x2, !(POP(@0x21D) < SLOAD(POP(0x0))))

# Stack: [@0x21D 0x0 @0xE0 :label5]
0x24B	PUSH(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 + 0x2 * POP(@0x21D))
0x24C	SWAP1
0x24F	PUSH(SLOAD(0x1))
0x250	DUP2
0x251	PUSH(SLOAD(POP(0x0)))
0x252	SWAP3
0x25C	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(POP(@0x24B)))
0x25D	SWAP3
0x25E	DUP3
0x25F	SWAP2
0x260	SWAP1
0x261	DUP2
0x267	JUMPI(0x2, !(POP(@0x24F) < POP(@0x251)))

# Stack: [@0x24F 0x0 0x0 @0x25C @0xE0 :label5]
0x26A	PUSH(MLOAD(0x40))
0x26B	PUSH(0x2)
0x26D	SWAP2
0x26E	SWAP1
0x26F	SWAP2
0x271	PUSH(0x0)
0x273	DUP1
0x27A	DUP1
0x27B	CODECOPY(POP(0x0), 0x2BA, 0x20)
0x27C	DUP1
0x27D	PUSH(MLOAD(POP(0x0)))
0x27E	SWAP1
0x27F	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x281	PUSH(SLOAD(POP(@0x27D) + POP(0x2) * POP(@0x24F)))
0x282	SWAP2
0x283	DUP2
0x284	DUP2
0x285	DUP2
0x286	DUP6
0x287	DUP9
0x288	DUP4
0x289	PUSH(CALL(POP(0x0), POP(@0x25C), POP(@0x281), POP(@0x26A), POP(0x0), POP(@0x26A), POP(0x0)))
0x28A	POP()
0x28B	POP()
0x28C	PUSH(0x1)
0x28E	DUP1
0x290	DUP1
0x291	PUSH(POP(0x1) + SLOAD(POP(0x1)))
0x292	SWAP1
0x293	SSTORE(POP(0x1), POP(@0x291))
0x294	POP()
0x295	PUSH(:label9)
0x298	SWAP2
0x299	POP()
0x29A	POP()
0x29B	JUMP(POP(:label9))

:label10
# Stack: [[@0x135 | @0x109] @0x107 :label8 @0xE4 0x0 @0xE4 @0xE0 :label5]
0x29D	POP()
0x29E	SWAP1
0x29F	JUMP(POP(:label8))

:label11
# Stack: [@0xE0 :label5]
0x2A1	POP()
0x2A2	JUMP(POP(:label5))

:label12
# Stack: [@0xAB @0xB7 :label12 @0x13]
0x2A4	PUSH(0x60)
0x2A6	SWAP2
0x2A7	DUP3
0x2A8	MSTORE(POP(0x60), POP(@0xB7))
0x2AB	MSTORE(0x80, POP(@0xAB))
0x2AC	PUSH(0x40)
0x2AE	SWAP1
0x2AF	RETURN(POP(0x60), POP(0x40))

:label13
# Stack: [[@0xD9 | 0xC80FEB9EEA08000 | @0xC1] [:label13 | :label13 | :label13] @0x13]
0x2B1	PUSH(0x60)
0x2B3	SWAP1
0x2B4	DUP2
0x2B5	MSTORE(POP(0x60), POP())
0x2B6	PUSH(0x20)
0x2B8	SWAP1
0x2B9	RETURN(POP(0x60), POP(0x20))


