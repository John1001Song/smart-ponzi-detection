# Stack: []
0x4	MSTORE(0x40, 0x60)
0xA	JUMPI(:label0, !CALLDATASIZE())

# Stack: []
0x13	PUSH(CALLDATALOAD(0x0) / 0x2 ** 0xE0)
0x19	DUP1
0x1E	JUMPI(:label1, POP(@0x13) == 0x29652E86)

# Stack: [@0x13]
0x1F	DUP1
0x29	JUMPI(:label2, 0x2DF05A3E == POP(@0x13))

# Stack: [@0x13]
0x2A	DUP1
0x34	JUMPI(:label3, 0x509D8C72 == POP(@0x13))

# Stack: [@0x13]
0x35	DUP1
0x3F	JUMPI(:label4, 0xCFF4D6CD == POP(@0x13))

# Stack: [@0x13]
0x40	DUP1
0x4A	JUMPI(:label5, 0xE6CBCBA9 == POP(@0x13))

:label0
# Stack: []
0x4C	PUSH(:label5)
0x4F	PUSH(0x0)
0x60	JUMPI(:label6, !(CALLVALUE() < 0x7CE66C50E2840000))

# Stack: [0x0 :label5]
0x64	JUMP(0x2)

:label1
# Stack: [@0x13]
0x66	PUSH(:label12)
0x6B	PUSH(CALLDATALOAD(0x4))
0x6C	PUSH(0x0)
0x6E	DUP1
0x6F	PUSH(SLOAD(POP(0x0)))
0x70	DUP2
0x71	SWAP1
0x72	DUP2
0x78	JUMPI(0x2, !(POP(@0x6B) < POP(@0x6F)))

# Stack: [@0x6B 0x0 @0x6B :label12 @0x13]
0x79	POP()
0x7A	DUP1
0x7B	MSTORE(POP(0x0), POP(0x0))
0x7E	PUSH(0x2 * POP(@0x6B))
0xA0	DUP1
0xA2	PUSH(SLOAD(POP(@0x7E) + 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563))
0xA3	PUSH(0x0)
0xA5	DUP1
0xAC	DUP1
0xAD	CODECOPY(POP(0x0), 0x2C5, 0x20)
0xAE	DUP1
0xAF	PUSH(MLOAD(POP(0x0)))
0xB0	SWAP1
0xB1	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0xB2	SWAP1
0xB3	SWAP1
0xB4	SWAP2
0xB6	PUSH(SLOAD(POP(@0xAF) + POP(@0x7E)))
0xBE	PUSH(0x2 ** 0xA0 - 0x1)
0xBF	SWAP2
0xC0	SWAP1
0xC1	SWAP2
0xC2	PUSH(POP(@0xBE) & POP(@0xA2))
0xC3	SWAP1
0xC4	DUP3
0xC5	JUMP(POP(:label12))

:label2
# Stack: [@0x13]
0xC7	PUSH(:label13)
0xCC	PUSH(SLOAD(0x1))
0xCD	DUP2
0xCE	JUMP(POP(:label13))

:label3
# Stack: [@0x13]
0xD0	PUSH(:label13)
0xD3	PUSH(0x7CE66C50E2840000)
0xDC	DUP2
0xDD	JUMP(POP(:label13))

:label4
# Stack: [@0x13]
0xDF	PUSH(:label13)
0xE4	PUSH(SLOAD(0x2))
0xE5	DUP2
0xE6	JUMP(POP(:label13))

:label5
# Stack: []
0xE8	STOP()

:label6
# Stack: [0x0 :label5]
0xEA	DUP1
0xEB	PUSH(SLOAD(POP(0x0)))
0xEE	DUP1
0xEF	PUSH(POP(@0xEB) + 0x1)
0xF0	DUP1
0xF1	DUP4
0xF2	SSTORE(POP(0x0), POP(@0xEF))
0xF3	SWAP1
0xF4	SWAP2
0xF5	DUP2
0xF6	DUP4
0xF7	DUP1
0xF8	PUSH(!POP(@0xEB))
0xF9	DUP2
0xFA	SWAP1
0xFF	JUMPI(:label8, POP(@0xF8) > POP(@0xEF))

# Stack: [@0xEB @0xEF 0x0 @0xEF @0xEB :label5]
0x102	PUSH(0x2 * POP(@0xEB))
0x103	DUP1
0x107	DUP2
0x10A	MSTORE(0x0, POP(0x0))
0x10F	PUSH(SHA3(0x0, 0x20))
0x110	SWAP1
0x111	DUP2
0x112	PUSH(POP(@0x10F) + POP(@0x102))
0x113	SWAP1
0x114	PUSH(POP(@0x10F) + 0x2 * POP(@0xEF))
0x115	PUSH(:label8)
0x118	SWAP2
0x119	SWAP1

:label7
# Stack: [[@0x114 | @0x140] @0x112 :label8 @0xEF 0x0 @0xEF @0xEB :label5]
0x11B	DUP1
0x11C	DUP3
0x122	JUMPI(:label10, !(POP(@0x112) > POP()))

# Stack: [[@0x114 | @0x140] @0x112 :label8 @0xEF 0x0 @0xEF @0xEB :label5]
0x123	DUP1
0x13C	DUP1
0x13D	SSTORE(POP(), ~0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & SLOAD(POP()))
0x140	PUSH(0x1 + POP())
0x141	DUP5
0x142	DUP2
0x143	SSTORE(POP(@0x140), POP(0x0))
0x147	JUMP(:label7)

:label8
# Stack: [[@0xEB | @0x112] @0xEF 0x0 @0xEF @0xEB :label5]
0x149	POP()
0x14A	POP()
0x14B	POP()
0x14C	POP()
0x14D	PUSH(CALLER())
0x14E	PUSH(0x0)
0x152	POP(0x0)
0x153	DUP3
0x154	DUP2
0x156	DUP1
0x15C	JUMPI(0x2, !(POP(@0xEB) < SLOAD(POP(0x0))))

# Stack: [@0xEB 0x0 @0x14D @0xEB :label5]
0x15D	SWAP1
0x160	MSTORE(0x0, POP(0x0))
0x165	PUSH(SHA3(0x0, 0x20))
0x166	SWAP1
0x16D	POP(0x0)
0x170	PUSH(0x0 + 0x2 * POP(@0xEB) + POP(@0x165))
0x176	PUSH(0x100 ** 0x0)
0x177	DUP2
0x179	DUP1
0x184	PUSH(~((0x2 ** 0xA0 - 0x1) * POP(@0x176)) & SLOAD(POP(@0x170)))
0x185	SWAP1
0x186	DUP4
0x188	PUSH(POP(@0x14D) * POP(@0x176) | POP(@0x184))
0x189	SWAP1
0x18A	SSTORE(POP(@0x170), POP(@0x188))
0x18B	POP()
0x18C	PUSH(0x8AC7230489E80000)
0x195	PUSH(0x0)
0x199	POP(0x0)
0x19A	DUP3
0x19B	DUP2
0x19D	DUP1
0x1A3	JUMPI(0x2, !(POP(@0xEB) < SLOAD(POP(0x0))))

# Stack: [@0xEB 0x0 0x8AC7230489E80000 @0xEB :label5]
0x1A4	SWAP1
0x1A7	MSTORE(0x0, POP(0x0))
0x1AC	PUSH(SHA3(0x0, 0x20))
0x1AD	SWAP1
0x1B4	POP(0x0)
0x1B7	PUSH(0x1 + 0x2 * POP(@0xEB) + POP(@0x1AC))
0x1BA	POP(0x0)
0x1BB	DUP1
0x1BC	SWAP1
0x1BD	SSTORE(POP(@0x1B7), POP(0x8AC7230489E80000))
0x1BE	POP()

:label9
# Stack: [@0xEB :label5]
0x1C2	PUSH(SLOAD(0x1))
0x1C3	PUSH(0x0)
0x1C5	DUP1
0x1C6	PUSH(SLOAD(POP(0x0)))
0x1D1	PUSH(BALANCE(0x2 ** 0xA0 - 0x1 & ADDRESS()))
0x1D2	SWAP2
0x1D3	SWAP1
0x1D4	DUP2
0x1DA	JUMPI(0x2, !(POP(@0x1C2) < POP(@0x1C6)))

# Stack: [@0x1C2 0x0 @0x1D1 @0xEB :label5]
0x1DB	SWAP1
0x1DC	DUP1
0x1DD	MSTORE(POP(0x0), POP(0x0))
0x1E1	PUSH(0x0)
0x1E3	DUP1
0x1EA	DUP1
0x1EB	CODECOPY(POP(0x0), 0x2C5, 0x20)
0x1EC	DUP1
0x1ED	PUSH(MLOAD(POP(0x0)))
0x1EE	SWAP1
0x1EF	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x1F7	JUMPI(:label11, !(SLOAD(POP(@0x1ED) + 0x2 * POP(@0x1C2)) < POP(@0x1D1)))

# Stack: [@0xEB :label5]
0x1FA	PUSH(SLOAD(0x1))
0x1FB	PUSH(0x0)
0x1FD	DUP1
0x1FE	PUSH(SLOAD(POP(0x0)))
0x1FF	SWAP1
0x200	SWAP2
0x201	SWAP1
0x202	DUP2
0x208	JUMPI(0x2, !(POP(@0x1FA) < POP(@0x1FE)))

# Stack: [@0x1FA 0x0 @0xEB :label5]
0x209	PUSH(0x2)
0x20B	DUP1
0x20C	PUSH(SLOAD(POP(0x2)))
0x20D	SWAP2
0x20E	DUP2
0x210	PUSH(0x0)
0x212	DUP1
0x219	DUP1
0x21A	CODECOPY(POP(0x0), 0x2C5, 0x20)
0x21B	DUP1
0x21C	PUSH(MLOAD(POP(0x0)))
0x21D	SWAP1
0x21E	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x220	PUSH(SLOAD(POP(@0x21C) + POP(0x2) * POP(@0x1FA)))
0x221	SWAP1
0x222	SWAP2
0x223	PUSH(POP(@0x20C) + POP(@0x220))
0x224	SWAP1
0x225	SSTORE(POP(0x2), POP(@0x223))
0x228	PUSH(SLOAD(0x1))
0x229	DUP2
0x22B	DUP1
0x231	JUMPI(0x2, !(POP(@0x228) < SLOAD(POP(0x0))))

# Stack: [@0x228 0x0 @0xEB :label5]
0x256	PUSH(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 + 0x2 * POP(@0x228))
0x257	SWAP1
0x25A	PUSH(SLOAD(0x1))
0x25B	DUP2
0x25C	PUSH(SLOAD(POP(0x0)))
0x25D	SWAP3
0x267	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(POP(@0x256)))
0x268	SWAP3
0x269	DUP3
0x26A	SWAP2
0x26B	SWAP1
0x26C	DUP2
0x272	JUMPI(0x2, !(POP(@0x25A) < POP(@0x25C)))

# Stack: [@0x25A 0x0 0x0 @0x267 @0xEB :label5]
0x275	PUSH(MLOAD(0x40))
0x276	PUSH(0x2)
0x278	SWAP2
0x279	SWAP1
0x27A	SWAP2
0x27C	PUSH(0x0)
0x27E	DUP1
0x285	DUP1
0x286	CODECOPY(POP(0x0), 0x2C5, 0x20)
0x287	DUP1
0x288	PUSH(MLOAD(POP(0x0)))
0x289	SWAP1
0x28A	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x28C	PUSH(SLOAD(POP(@0x288) + POP(0x2) * POP(@0x25A)))
0x28D	SWAP2
0x28E	DUP2
0x28F	DUP2
0x290	DUP2
0x291	DUP6
0x292	DUP9
0x293	DUP4
0x294	PUSH(CALL(POP(0x0), POP(@0x267), POP(@0x28C), POP(@0x275), POP(0x0), POP(@0x275), POP(0x0)))
0x295	POP()
0x296	POP()
0x297	PUSH(0x1)
0x299	DUP1
0x29B	DUP1
0x29C	PUSH(POP(0x1) + SLOAD(POP(0x1)))
0x29D	SWAP1
0x29E	SSTORE(POP(0x1), POP(@0x29C))
0x29F	POP()
0x2A0	PUSH(:label9)
0x2A3	SWAP2
0x2A4	POP()
0x2A5	POP()
0x2A6	JUMP(POP(:label9))

:label10
# Stack: [[@0x140 | @0x114] @0x112 :label8 @0xEF 0x0 @0xEF @0xEB :label5]
0x2A8	POP()
0x2A9	SWAP1
0x2AA	JUMP(POP(:label8))

:label11
# Stack: [@0xEB :label5]
0x2AC	POP()
0x2AD	JUMP(POP(:label5))

:label12
# Stack: [@0xB6 @0xC2 :label12 @0x13]
0x2AF	PUSH(0x60)
0x2B1	SWAP2
0x2B2	DUP3
0x2B3	MSTORE(POP(0x60), POP(@0xC2))
0x2B6	MSTORE(0x80, POP(@0xB6))
0x2B7	PUSH(0x40)
0x2B9	SWAP1
0x2BA	RETURN(POP(0x60), POP(0x40))

:label13
# Stack: [[@0xE4 | 0x7CE66C50E2840000 | @0xCC] [:label13 | :label13 | :label13] @0x13]
0x2BC	PUSH(0x60)
0x2BE	SWAP1
0x2BF	DUP2
0x2C0	MSTORE(POP(0x60), POP())
0x2C1	PUSH(0x20)
0x2C3	SWAP1
0x2C4	RETURN(POP(0x60), POP(0x20))


