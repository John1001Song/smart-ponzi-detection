# Stack: []
0x4	MSTORE(0x40, 0x60)
0xA	JUMPI(:label0, !CALLDATASIZE())

# Stack: []
0x13	PUSH(CALLDATALOAD(0x0) / 0x2 ** 0xE0)
0x19	DUP1
0x1E	JUMPI(:label1, POP(@0x13) == 0x29652E86)

# Stack: [@0x13]
0x1F	DUP1
0x29	JUMPI(:label2, 0x2DF05A3E == POP(@0x13))

# Stack: [@0x13]
0x2A	DUP1
0x34	JUMPI(:label3, 0x509D8C72 == POP(@0x13))

# Stack: [@0x13]
0x35	DUP1
0x3F	JUMPI(:label4, 0x66FB3831 == POP(@0x13))

# Stack: [@0x13]
0x40	DUP1
0x4A	JUMPI(:label5, 0xCFF4D6CD == POP(@0x13))

:label0
# Stack: []
0x4C	PUSH(:label6)
0x4F	PUSH(0x0)
0x5F	JUMPI(:label7, 0xDE444324C2A8000 == CALLVALUE())

# Stack: [0x0 :label6]
0x63	JUMP(0x2)

:label1
# Stack: [@0x13]
0x65	PUSH(:label13)
0x6A	PUSH(CALLDATALOAD(0x4))
0x6B	PUSH(0x0)
0x6D	DUP1
0x6E	PUSH(SLOAD(POP(0x0)))
0x6F	DUP2
0x70	SWAP1
0x71	DUP2
0x77	JUMPI(0x2, !(POP(@0x6A) < POP(@0x6E)))

# Stack: [@0x6A 0x0 @0x6A :label13 @0x13]
0x78	POP()
0x79	DUP1
0x7A	MSTORE(POP(0x0), POP(0x0))
0x7D	PUSH(0x2 * POP(@0x6A))
0x9F	DUP1
0xA1	PUSH(SLOAD(POP(@0x7D) + 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563))
0xA2	PUSH(0x0)
0xA4	DUP1
0xAB	DUP1
0xAC	CODECOPY(POP(0x0), 0x2D3, 0x20)
0xAD	DUP1
0xAE	PUSH(MLOAD(POP(0x0)))
0xAF	SWAP1
0xB0	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0xB1	SWAP1
0xB2	SWAP1
0xB3	SWAP2
0xB5	PUSH(SLOAD(POP(@0xAE) + POP(@0x7D)))
0xBD	PUSH(0x2 ** 0xA0 - 0x1)
0xBE	SWAP2
0xBF	SWAP1
0xC0	SWAP2
0xC1	PUSH(POP(@0xBD) & POP(@0xA1))
0xC2	SWAP1
0xC3	DUP3
0xC4	JUMP(POP(:label13))

:label2
# Stack: [@0x13]
0xC6	PUSH(:label14)
0xCB	PUSH(SLOAD(0x1))
0xCC	DUP2
0xCD	JUMP(POP(:label14))

:label3
# Stack: [@0x13]
0xCF	PUSH(:label14)
0xD2	PUSH(0xDE444324C2A8000)
0xDB	DUP2
0xDC	JUMP(POP(:label14))

:label4
# Stack: [@0x13]
0xDE	PUSH(:label14)
0xE1	PUSH(0x22B1C8C1227A0000)
0xEA	DUP2
0xEB	JUMP(POP(:label14))

:label5
# Stack: [@0x13]
0xED	PUSH(:label14)
0xF2	PUSH(SLOAD(0x2))
0xF3	DUP2
0xF4	JUMP(POP(:label14))

:label6
# Stack: []
0xF6	STOP()

:label7
# Stack: [0x0 :label6]
0xF8	DUP1
0xF9	PUSH(SLOAD(POP(0x0)))
0xFC	DUP1
0xFD	PUSH(POP(@0xF9) + 0x1)
0xFE	DUP1
0xFF	DUP4
0x100	SSTORE(POP(0x0), POP(@0xFD))
0x101	SWAP1
0x102	SWAP2
0x103	DUP2
0x104	DUP4
0x105	DUP1
0x106	PUSH(!POP(@0xF9))
0x107	DUP2
0x108	SWAP1
0x10D	JUMPI(:label9, POP(@0x106) > POP(@0xFD))

# Stack: [@0xF9 @0xFD 0x0 @0xFD @0xF9 :label6]
0x110	PUSH(0x2 * POP(@0xF9))
0x111	DUP1
0x115	DUP2
0x118	MSTORE(0x0, POP(0x0))
0x11D	PUSH(SHA3(0x0, 0x20))
0x11E	SWAP1
0x11F	DUP2
0x120	PUSH(POP(@0x11D) + POP(@0x110))
0x121	SWAP1
0x122	PUSH(POP(@0x11D) + 0x2 * POP(@0xFD))
0x123	PUSH(:label9)
0x126	SWAP2
0x127	SWAP1

:label8
# Stack: [[@0x122 | @0x14E] @0x120 :label9 @0xFD 0x0 @0xFD @0xF9 :label6]
0x129	DUP1
0x12A	DUP3
0x130	JUMPI(:label11, !(POP(@0x120) > POP()))

# Stack: [[@0x122 | @0x14E] @0x120 :label9 @0xFD 0x0 @0xFD @0xF9 :label6]
0x131	DUP1
0x14A	DUP1
0x14B	SSTORE(POP(), ~0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & SLOAD(POP()))
0x14E	PUSH(0x1 + POP())
0x14F	DUP5
0x150	DUP2
0x151	SSTORE(POP(@0x14E), POP(0x0))
0x155	JUMP(:label8)

:label9
# Stack: [[@0xF9 | @0x120] @0xFD 0x0 @0xFD @0xF9 :label6]
0x157	POP()
0x158	POP()
0x159	POP()
0x15A	POP()
0x15B	PUSH(CALLER())
0x15C	PUSH(0x0)
0x160	POP(0x0)
0x161	DUP3
0x162	DUP2
0x164	DUP1
0x16A	JUMPI(0x2, !(POP(@0xF9) < SLOAD(POP(0x0))))

# Stack: [@0xF9 0x0 @0x15B @0xF9 :label6]
0x16B	SWAP1
0x16E	MSTORE(0x0, POP(0x0))
0x173	PUSH(SHA3(0x0, 0x20))
0x174	SWAP1
0x17B	POP(0x0)
0x17E	PUSH(0x0 + 0x2 * POP(@0xF9) + POP(@0x173))
0x184	PUSH(0x100 ** 0x0)
0x185	DUP2
0x187	DUP1
0x192	PUSH(~((0x2 ** 0xA0 - 0x1) * POP(@0x184)) & SLOAD(POP(@0x17E)))
0x193	SWAP1
0x194	DUP4
0x196	PUSH(POP(@0x15B) * POP(@0x184) | POP(@0x192))
0x197	SWAP1
0x198	SSTORE(POP(@0x17E), POP(@0x196))
0x199	POP()
0x19A	PUSH(0x22B1C8C1227A0000)
0x1A3	PUSH(0x0)
0x1A7	POP(0x0)
0x1A8	DUP3
0x1A9	DUP2
0x1AB	DUP1
0x1B1	JUMPI(0x2, !(POP(@0xF9) < SLOAD(POP(0x0))))

# Stack: [@0xF9 0x0 0x22B1C8C1227A0000 @0xF9 :label6]
0x1B2	SWAP1
0x1B5	MSTORE(0x0, POP(0x0))
0x1BA	PUSH(SHA3(0x0, 0x20))
0x1BB	SWAP1
0x1C2	POP(0x0)
0x1C5	PUSH(0x1 + 0x2 * POP(@0xF9) + POP(@0x1BA))
0x1C8	POP(0x0)
0x1C9	DUP1
0x1CA	SWAP1
0x1CB	SSTORE(POP(@0x1C5), POP(0x22B1C8C1227A0000))
0x1CC	POP()

:label10
# Stack: [@0xF9 :label6]
0x1D0	PUSH(SLOAD(0x1))
0x1D1	PUSH(0x0)
0x1D3	DUP1
0x1D4	PUSH(SLOAD(POP(0x0)))
0x1DF	PUSH(BALANCE(0x2 ** 0xA0 - 0x1 & ADDRESS()))
0x1E0	SWAP2
0x1E1	SWAP1
0x1E2	DUP2
0x1E8	JUMPI(0x2, !(POP(@0x1D0) < POP(@0x1D4)))

# Stack: [@0x1D0 0x0 @0x1DF @0xF9 :label6]
0x1E9	SWAP1
0x1EA	DUP1
0x1EB	MSTORE(POP(0x0), POP(0x0))
0x1EF	PUSH(0x0)
0x1F1	DUP1
0x1F8	DUP1
0x1F9	CODECOPY(POP(0x0), 0x2D3, 0x20)
0x1FA	DUP1
0x1FB	PUSH(MLOAD(POP(0x0)))
0x1FC	SWAP1
0x1FD	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x205	JUMPI(:label12, !(SLOAD(POP(@0x1FB) + 0x2 * POP(@0x1D0)) < POP(@0x1DF)))

# Stack: [@0xF9 :label6]
0x208	PUSH(SLOAD(0x1))
0x209	PUSH(0x0)
0x20B	DUP1
0x20C	PUSH(SLOAD(POP(0x0)))
0x20D	SWAP1
0x20E	SWAP2
0x20F	SWAP1
0x210	DUP2
0x216	JUMPI(0x2, !(POP(@0x208) < POP(@0x20C)))

# Stack: [@0x208 0x0 @0xF9 :label6]
0x217	PUSH(0x2)
0x219	DUP1
0x21A	PUSH(SLOAD(POP(0x2)))
0x21B	SWAP2
0x21C	DUP2
0x21E	PUSH(0x0)
0x220	DUP1
0x227	DUP1
0x228	CODECOPY(POP(0x0), 0x2D3, 0x20)
0x229	DUP1
0x22A	PUSH(MLOAD(POP(0x0)))
0x22B	SWAP1
0x22C	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x22E	PUSH(SLOAD(POP(@0x22A) + POP(0x2) * POP(@0x208)))
0x22F	SWAP1
0x230	SWAP2
0x231	PUSH(POP(@0x21A) + POP(@0x22E))
0x232	SWAP1
0x233	SSTORE(POP(0x2), POP(@0x231))
0x236	PUSH(SLOAD(0x1))
0x237	DUP2
0x239	DUP1
0x23F	JUMPI(0x2, !(POP(@0x236) < SLOAD(POP(0x0))))

# Stack: [@0x236 0x0 @0xF9 :label6]
0x264	PUSH(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 + 0x2 * POP(@0x236))
0x265	SWAP1
0x268	PUSH(SLOAD(0x1))
0x269	DUP2
0x26A	PUSH(SLOAD(POP(0x0)))
0x26B	SWAP3
0x275	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(POP(@0x264)))
0x276	SWAP3
0x277	DUP3
0x278	SWAP2
0x279	SWAP1
0x27A	DUP2
0x280	JUMPI(0x2, !(POP(@0x268) < POP(@0x26A)))

# Stack: [@0x268 0x0 0x0 @0x275 @0xF9 :label6]
0x283	PUSH(MLOAD(0x40))
0x284	PUSH(0x2)
0x286	SWAP2
0x287	SWAP1
0x288	SWAP2
0x28A	PUSH(0x0)
0x28C	DUP1
0x293	DUP1
0x294	CODECOPY(POP(0x0), 0x2D3, 0x20)
0x295	DUP1
0x296	PUSH(MLOAD(POP(0x0)))
0x297	SWAP1
0x298	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x29A	PUSH(SLOAD(POP(@0x296) + POP(0x2) * POP(@0x268)))
0x29B	SWAP2
0x29C	DUP2
0x29D	DUP2
0x29E	DUP2
0x29F	DUP6
0x2A0	DUP9
0x2A1	DUP4
0x2A2	PUSH(CALL(POP(0x0), POP(@0x275), POP(@0x29A), POP(@0x283), POP(0x0), POP(@0x283), POP(0x0)))
0x2A3	POP()
0x2A4	POP()
0x2A5	PUSH(0x1)
0x2A7	DUP1
0x2A9	DUP1
0x2AA	PUSH(POP(0x1) + SLOAD(POP(0x1)))
0x2AB	SWAP1
0x2AC	SSTORE(POP(0x1), POP(@0x2AA))
0x2AD	POP()
0x2AE	PUSH(:label10)
0x2B1	SWAP2
0x2B2	POP()
0x2B3	POP()
0x2B4	JUMP(POP(:label10))

:label11
# Stack: [[@0x14E | @0x122] @0x120 :label9 @0xFD 0x0 @0xFD @0xF9 :label6]
0x2B6	POP()
0x2B7	SWAP1
0x2B8	JUMP(POP(:label9))

:label12
# Stack: [@0xF9 :label6]
0x2BA	POP()
0x2BB	JUMP(POP(:label6))

:label13
# Stack: [@0xB5 @0xC1 :label13 @0x13]
0x2BD	PUSH(0x60)
0x2BF	SWAP2
0x2C0	DUP3
0x2C1	MSTORE(POP(0x60), POP(@0xC1))
0x2C4	MSTORE(0x80, POP(@0xB5))
0x2C5	PUSH(0x40)
0x2C7	SWAP1
0x2C8	RETURN(POP(0x60), POP(0x40))

:label14
# Stack: [[0xDE444324C2A8000 | @0xCB | @0xF2 | 0x22B1C8C1227A0000] [:label14 | :label14 | :label14 | :label14] @0x13]
0x2CA	PUSH(0x60)
0x2CC	SWAP1
0x2CD	DUP2
0x2CE	MSTORE(POP(0x60), POP())
0x2CF	PUSH(0x20)
0x2D1	SWAP1
0x2D2	RETURN(POP(0x60), POP(0x20))


