# Stack: []
0x4	MSTORE(0x40, 0x60)
0xA	JUMPI(:label0, !CALLDATASIZE())

# Stack: []
0x13	PUSH(CALLDATALOAD(0x0) / 0x2 ** 0xE0)
0x19	DUP1
0x1E	JUMPI(:label1, POP(@0x13) == 0x13AF4035)

# Stack: [@0x13]
0x1F	DUP1
0x29	JUMPI(:label3, 0x35C1D349 == POP(@0x13))

# Stack: [@0x13]
0x2A	DUP1
0x34	JUMPI(:label4, 0x8DA5CB5B == POP(@0x13))

# Stack: [@0x13]
0x35	DUP1
0x3F	JUMPI(:label5, 0x9003ADFE == POP(@0x13))

# Stack: [@0x13]
0x40	DUP1
0x4A	JUMPI(:label6, 0xA60F3588 == POP(@0x13))

# Stack: [@0x13]
0x4B	DUP1
0x55	JUMPI(:label7, 0xB69EF8A8 == POP(@0x13))

# Stack: [@0x13]
0x56	DUP1
0x60	JUMPI(:label8, 0xC8796572 == POP(@0x13))

# Stack: [@0x13]
0x61	DUP1
0x6B	JUMPI(:label10, 0xE97DCB62 == POP(@0x13))

:label0
# Stack: []
0x6D	PUSH(:label12)
0x70	PUSH(:label9)
0x76	JUMP(:label11)

:label1
# Stack: [@0x13]
0x78	PUSH(:label12)
0x7D	PUSH(CALLDATALOAD(0x4))
0x80	PUSH(SLOAD(0x4))
0x88	PUSH(0x2 ** 0xA0 - 0x1)
0x89	SWAP1
0x8A	DUP2
0x8B	PUSH(POP(@0x88) & POP(@0x80))
0x8C	PUSH(CALLER())
0x8D	SWAP1
0x8E	SWAP1
0x8F	SWAP2
0x96	JUMPI(:label2, !(POP(@0x8C) & POP(@0x88) == POP(@0x8B)))

# Stack: [@0x7D :label12 @0x13]
0x97	PUSH(0x4)
0x99	DUP1
0xA5	DUP2
0xA6	PUSH(POP(@0x7D) | ~(0x2 ** 0xA0 - 0x1) & SLOAD(POP(0x4)))
0xA7	SWAP1
0xA8	SSTORE(POP(0x4), POP(@0xA6))

:label2
# Stack: [@0x7D :label12 @0x13]
0xAA	POP()
0xAB	JUMP(POP(:label12))

:label3
# Stack: [@0x13]
0xAD	PUSH(:label13)
0xB2	PUSH(CALLDATALOAD(0x4))
0xB3	PUSH(0x0)
0xB5	DUP1
0xB6	PUSH(SLOAD(POP(0x0)))
0xB7	DUP2
0xB8	SWAP1
0xB9	DUP2
0xBF	JUMPI(0x2, !(POP(@0xB2) < POP(@0xB6)))

# Stack: [@0xB2 0x0 @0xB2 :label13 @0x13]
0xC0	POP()
0xC1	DUP1
0xC2	MSTORE(POP(0x0), POP(0x0))
0xC5	PUSH(0x2 * POP(@0xB2))
0xC6	PUSH(0x0)
0xC8	DUP1
0xCF	DUP1
0xD0	CODECOPY(POP(0x0), 0x436, 0x20)
0xD1	DUP1
0xD2	PUSH(MLOAD(POP(0x0)))
0xD3	SWAP1
0xD4	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0xD5	DUP2
0xD7	PUSH(SLOAD(POP(@0xC5) + POP(@0xD2)))
0xD8	PUSH(0x0)
0xDA	DUP1
0xE1	DUP1
0xE2	CODECOPY(POP(0x0), 0x416, 0x20)
0xE3	DUP1
0xE4	PUSH(MLOAD(POP(0x0)))
0xE5	SWAP1
0xE6	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0xE7	SWAP2
0xE8	SWAP1
0xE9	SWAP2
0xF4	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(POP(@0xE4) + POP(@0xC5)))
0xF5	SWAP1
0xF6	DUP3
0xF7	JUMP(POP(:label13))

:label4
# Stack: [@0x13]
0xF9	PUSH(:label14)
0x107	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(0x4))
0x108	DUP2
0x109	JUMP(POP(:label14))

:label5
# Stack: [@0x13]
0x10B	PUSH(:label15)
0x110	PUSH(SLOAD(0x2))
0x111	DUP2
0x112	JUMP(POP(:label15))

:label6
# Stack: [@0x13]
0x114	PUSH(:label15)
0x119	PUSH(SLOAD(0x1))
0x11A	DUP2
0x11B	JUMP(POP(:label15))

:label7
# Stack: [@0x13]
0x11D	PUSH(:label15)
0x122	PUSH(SLOAD(0x3))
0x123	DUP2
0x124	JUMP(POP(:label15))

:label8
# Stack: [@0x13]
0x126	PUSH(:label12)
0x12B	PUSH(SLOAD(0x4))
0x133	PUSH(0x2 ** 0xA0 - 0x1)
0x134	SWAP1
0x135	DUP2
0x136	PUSH(POP(@0x133) & POP(@0x12B))
0x137	PUSH(CALLER())
0x138	SWAP1
0x139	SWAP1
0x13A	SWAP2
0x141	JUMPI(:label9, !(POP(@0x137) & POP(@0x133) == POP(@0x136)))

# Stack: [:label12 @0x13]
0x14C	JUMPI(:label23, !(0x0 == SLOAD(0x2)))

:label9
# Stack: [[:label12 | :label12]]
0x14E	JUMP(POP())

:label10
# Stack: [@0x13]
0x150	PUSH(:label12)

:label11
# Stack: [[:label9 | :label12] [:label12 | @0x13]]
0x154	PUSH(0x0)
0x156	PUSH(0x0)
0x167	JUMPI(:label16, !(CALLVALUE() < 0xDE0B6B3A7640000))

# Stack: [0x0 0x0 [:label9 | :label12] [:label12 | @0x13]]
0x16A	PUSH(MLOAD(0x40))
0x174	PUSH(CALLER() & 0x2 ** 0xA0 - 0x1)
0x175	SWAP1
0x176	DUP3
0x177	SWAP1
0x178	PUSH(CALLVALUE())
0x179	SWAP1
0x17A	DUP3
0x17B	DUP2
0x17C	DUP2
0x17D	DUP2
0x17E	DUP6
0x17F	DUP9
0x180	DUP4
0x181	PUSH(CALL(POP(0x0), POP(@0x174), POP(@0x178), POP(@0x16A), POP(0x0), POP(@0x16A), POP(0x0)))
0x182	SWAP4
0x183	POP()
0x184	POP()
0x185	POP()
0x186	POP()
0x187	POP()
0x18B	JUMP(:label22)

:label12
# Stack: []
0x18D	STOP()

:label13
# Stack: [@0xD7 @0xF4 :label13 @0x13]
0x191	PUSH(MLOAD(0x40))
0x192	DUP1
0x193	DUP4
0x19D	DUP1
0x19E	MSTORE(POP(@0x191), 0x2 ** 0xA0 - 0x1 & POP(@0xF4))
0x1A1	PUSH(0x20 + POP(@0x191))
0x1A2	DUP3
0x1A3	DUP2
0x1A4	MSTORE(POP(@0x1A1), POP(@0xD7))
0x1A7	PUSH(0x20 + POP(@0x1A1))
0x1A8	SWAP3
0x1A9	POP()
0x1AA	POP()
0x1AB	POP()
0x1AE	PUSH(MLOAD(0x40))
0x1AF	DUP1
0x1B0	SWAP2
0x1B1	PUSH(POP(@0x1A7) - POP(@0x1AE))
0x1B2	SWAP1
0x1B3	RETURN(POP(@0x1AE), POP(@0x1B1))

:label14
# Stack: [@0x107 :label14 @0x13]
0x1B5	PUSH(0x40)
0x1B7	DUP1
0x1B8	PUSH(MLOAD(POP(0x40)))
0x1C0	PUSH(0x2 ** 0xA0 - 0x1)
0x1C1	SWAP3
0x1C2	SWAP1
0x1C3	SWAP3
0x1C5	DUP2
0x1C6	MSTORE(POP(@0x1B8), POP(@0x1C0) & POP(@0x107))
0x1C7	PUSH(MLOAD(POP(0x40)))
0x1C8	SWAP1
0x1C9	DUP2
0x1CA	SWAP1
0x1CE	PUSH(0x20 + POP(@0x1B8) - POP(@0x1C7))
0x1CF	SWAP1
0x1D0	RETURN(POP(@0x1C7), POP(@0x1CE))

:label15
# Stack: [[@0x122 | @0x119 | @0x110] [:label15 | :label15 | :label15] @0x13]
0x1D2	PUSH(0x40)
0x1D4	DUP1
0x1D5	PUSH(MLOAD(POP(0x40)))
0x1D6	SWAP2
0x1D7	DUP3
0x1D8	MSTORE(POP(@0x1D5), POP())
0x1D9	PUSH(MLOAD(POP(0x40)))
0x1DA	SWAP1
0x1DB	DUP2
0x1DC	SWAP1
0x1E0	PUSH(0x20 + POP(@0x1D5) - POP(@0x1D9))
0x1E1	SWAP1
0x1E2	RETURN(POP(@0x1D9), POP(@0x1E0))

:label16
# Stack: [0x0 0x0 [:label9 | :label12] [@0x13 | :label12]]
0x1E4	PUSH(0x0)
0x1E6	DUP1
0x1E7	PUSH(SLOAD(POP(0x0)))
0x1EA	DUP1
0x1EB	PUSH(POP(@0x1E7) + 0x1)
0x1EC	DUP1
0x1ED	DUP4
0x1EE	SSTORE(POP(0x0), POP(@0x1EB))
0x1EF	SWAP1
0x1F0	SWAP4
0x1F1	POP()
0x1F2	SWAP1
0x1F3	DUP2
0x1F4	DUP5
0x1F5	DUP1
0x1F6	PUSH(!POP(@0x1E7))
0x1F7	DUP2
0x1F8	SWAP1
0x1FD	JUMPI(:label18, POP(@0x1F6) > POP(@0x1EB))

# Stack: [@0x1E7 @0x1EB 0x0 @0x1EB 0x0 @0x1E7 [:label12 | :label9] [:label12 | @0x13]]
0x1FE	DUP3
0x1FF	DUP1
0x200	MSTORE(POP(0x0), POP(0x0))
0x201	PUSH(:label18)
0x204	SWAP1
0x205	PUSH(0x2)
0x207	SWAP1
0x208	DUP2
0x209	PUSH(POP(0x2) * POP(@0x1E7))
0x20A	PUSH(0x0)
0x20C	DUP1
0x213	DUP1
0x214	CODECOPY(POP(0x0), 0x416, 0x20)
0x215	DUP1
0x216	PUSH(MLOAD(POP(0x0)))
0x217	SWAP1
0x218	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x219	SWAP1
0x21A	DUP2
0x21B	PUSH(POP(@0x216) + POP(@0x209))
0x21C	SWAP2
0x21D	DUP5
0x21F	PUSH(POP(@0x1EB) * POP(0x2) + POP(@0x216))

:label17
# Stack: [[@0x21F | @0x23E] @0x21B :label18 @0x1EB 0x0 @0x1EB 0x0 @0x1E7 [:label9 | :label12] [:label12 | @0x13]]
0x221	DUP1
0x222	DUP3
0x228	JUMPI(:label19, !(POP(@0x21B) > POP()))

# Stack: [[@0x21F | @0x23E] @0x21B :label18 @0x1EB 0x0 @0x1EB 0x0 @0x1E7 [:label9 | :label12] [:label12 | @0x13]]
0x229	DUP1
0x235	DUP1
0x236	SSTORE(POP(), ~(0x2 ** 0xA0 - 0x1) & SLOAD(POP()))
0x237	PUSH(0x0)
0x239	PUSH(0x1)
0x23B	SWAP1
0x23C	SWAP1
0x23D	SWAP2
0x23E	PUSH(POP(0x1) + POP())
0x23F	SWAP1
0x240	DUP2
0x241	SSTORE(POP(@0x23E), POP(0x0))
0x245	JUMP(:label17)

:label18
# Stack: [[@0x21B | @0x1E7] @0x1EB 0x0 @0x1EB 0x0 @0x1E7 [:label9 | :label12] [@0x13 | :label12]]
0x247	POP()
0x248	POP()
0x249	POP()
0x24A	POP()
0x24B	PUSH(CALLER())
0x24C	PUSH(0x0)
0x250	POP(0x0)
0x251	DUP4
0x252	DUP2
0x254	DUP1
0x25A	JUMPI(0x2, !(POP(@0x1E7) < SLOAD(POP(0x0))))

# Stack: [@0x1E7 0x0 @0x24B 0x0 @0x1E7 [:label9 | :label12] [:label12 | @0x13]]
0x25B	DUP2
0x25C	DUP1
0x25D	MSTORE(POP(0x0), POP(0x0))
0x261	PUSH(0x0)
0x263	DUP1
0x26A	DUP1
0x26B	CODECOPY(POP(0x0), 0x416, 0x20)
0x26C	DUP1
0x26D	PUSH(MLOAD(POP(0x0)))
0x26E	SWAP1
0x26F	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x270	PUSH(POP(@0x26D) + 0x2 * POP(@0x1E7))
0x271	DUP1
0x27C	PUSH(~(0x2 ** 0xA0 - 0x1) & SLOAD(POP(@0x270)))
0x27D	SWAP1
0x27E	SWAP3
0x27F	PUSH(POP(@0x24B) | POP(@0x27C))
0x280	SWAP1
0x281	SWAP2
0x282	SSTORE(POP(@0x270), POP(@0x27F))
0x283	DUP1
0x284	PUSH(SLOAD(POP(0x0)))
0x285	PUSH(CALLVALUE())
0x286	SWAP1
0x287	SWAP1
0x288	DUP5
0x289	SWAP1
0x28A	DUP2
0x290	JUMPI(0x2, !(POP(@0x1E7) < POP(@0x284)))

# Stack: [@0x1E7 0x0 @0x285 0x0 @0x1E7 [:label9 | :label12] [:label12 | @0x13]]
0x294	PUSH(0x0)
0x296	DUP1
0x29D	DUP1
0x29E	CODECOPY(POP(0x0), 0x436, 0x20)
0x29F	DUP1
0x2A0	PUSH(MLOAD(POP(0x0)))
0x2A1	SWAP1
0x2A2	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x2A3	PUSH(POP(@0x2A0) + 0x2 * POP(@0x1E7))
0x2A4	SWAP2
0x2A5	SWAP1
0x2A6	SWAP2
0x2A7	SSTORE(POP(@0x2A3), POP(@0x285))
0x2A8	DUP3
0x2AD	JUMPI(:label20, POP(@0x1E7) == POP(0x0))

# Stack: [0x0 @0x1E7 [:label9 | :label12] [:label12 | @0x13]]
0x2AE	PUSH(0x2)
0x2B0	DUP1
0x2B1	PUSH(SLOAD(POP(0x2)))
0x2B2	PUSH(0xA)
0x2B4	PUSH(CALLVALUE())
0x2B5	SWAP1
0x2B6	DUP2
0x2B7	PUSH(POP(@0x2B4) / POP(0xA))
0x2B8	SWAP1
0x2B9	SWAP1
0x2BA	SWAP2
0x2BB	PUSH(POP(@0x2B7) + POP(@0x2B1))
0x2BC	SWAP1
0x2BD	SWAP2
0x2BE	SSTORE(POP(0x2), POP(@0x2BB))
0x2BF	PUSH(0x3)
0x2C1	DUP1
0x2C2	PUSH(SLOAD(POP(0x3)))
0x2C3	SWAP1
0x2C4	SWAP2
0x2C5	PUSH(POP(@0x2B4) + POP(@0x2C2))
0x2C6	SWAP1
0x2C7	SSTORE(POP(0x3), POP(@0x2C5))
0x2CB	JUMP(:label21)

:label19
# Stack: [[@0x23E | @0x21F] @0x21B :label18 @0x1EB 0x0 @0x1EB 0x0 @0x1E7 [:label9 | :label12] [:label12 | @0x13]]
0x2CD	POP()
0x2CE	SWAP1
0x2CF	JUMP(POP(:label18))

:label20
# Stack: [0x0 @0x1E7 [:label9 | :label12] [:label12 | @0x13]]
0x2D1	PUSH(0x2)
0x2D3	DUP1
0x2D6	PUSH(CALLVALUE() + SLOAD(POP(0x2)))
0x2D7	SWAP1
0x2D8	SSTORE(POP(0x2), POP(@0x2D6))

:label21
# Stack: [0x0 @0x1E7 [:label9 | :label12] [:label12 | @0x13]]
0x2DC	PUSH(SLOAD(0x1))
0x2DD	PUSH(0x0)
0x2DF	DUP1
0x2E0	PUSH(SLOAD(POP(0x0)))
0x2E1	SWAP1
0x2E2	SWAP2
0x2E3	SWAP1
0x2E4	DUP2
0x2EA	JUMPI(0x2, !(POP(@0x2DC) < POP(@0x2E0)))

# Stack: [@0x2DC 0x0 0x0 @0x1E7 [:label9 | :label12] [:label12 | @0x13]]
0x2EB	SWAP1
0x2EC	DUP1
0x2ED	MSTORE(POP(0x0), POP(0x0))
0x2EE	PUSH(0x2)
0x2F0	SWAP1
0x2F1	DUP2
0x2F3	PUSH(0x0)
0x2F5	DUP1
0x2FC	DUP1
0x2FD	CODECOPY(POP(0x0), 0x436, 0x20)
0x2FE	DUP1
0x2FF	PUSH(MLOAD(POP(0x0)))
0x300	SWAP1
0x301	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x306	PUSH(SLOAD(0x3))
0x307	SWAP1
0x308	PUSH(POP(0x2) * SLOAD(POP(@0x2FF) + POP(0x2) * POP(@0x2DC)))
0x309	SWAP1
0x30F	JUMPI(:label22, !(POP(@0x306) > POP(@0x308)))

# Stack: [0x0 @0x1E7 [:label9 | :label12] [:label12 | @0x13]]
0x312	PUSH(SLOAD(0x1))
0x313	PUSH(0x0)
0x315	DUP1
0x316	PUSH(SLOAD(POP(0x0)))
0x317	PUSH(0xA)
0x319	SWAP2
0x31A	SWAP1
0x31B	DUP2
0x321	JUMPI(0x2, !(POP(@0x312) < POP(@0x316)))

# Stack: [@0x312 0x0 0xA 0x0 @0x1E7 [:label9 | :label12] [:label12 | @0x13]]
0x322	DUP2
0x323	PUSH(SLOAD(POP(0x0)))
0x326	PUSH(SLOAD(0x1))
0x327	PUSH(0x2)
0x329	SWAP2
0x32A	SWAP1
0x32B	SWAP2
0x32D	PUSH(0x0)
0x32F	DUP1
0x336	DUP1
0x337	CODECOPY(POP(0x0), 0x436, 0x20)
0x338	DUP1
0x339	PUSH(MLOAD(POP(0x0)))
0x33A	SWAP1
0x33B	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x33D	PUSH(SLOAD(POP(@0x339) + POP(0x2) * POP(@0x312)))
0x33E	SWAP3
0x33F	SWAP1
0x340	SWAP4
0x341	PUSH(POP(@0x33D) / POP(0xA))
0x342	SWAP3
0x343	DUP2
0x349	JUMPI(0x2, !(POP(@0x326) < POP(@0x323)))

# Stack: [@0x326 0x0 @0x341 0x0 @0x1E7 [:label9 | :label12] [:label12 | @0x13]]
0x34A	DUP2
0x34B	PUSH(SLOAD(POP(0x0)))
0x34E	PUSH(SLOAD(0x1))
0x34F	PUSH(0x2)
0x351	SWAP2
0x352	DUP3
0x354	PUSH(0x0)
0x356	DUP1
0x35D	DUP1
0x35E	CODECOPY(POP(0x0), 0x436, 0x20)
0x35F	DUP1
0x360	PUSH(MLOAD(POP(0x0)))
0x361	SWAP1
0x362	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x364	PUSH(SLOAD(POP(@0x360) + POP(0x2) * POP(@0x326)))
0x365	SWAP4
0x366	SWAP1
0x367	SWAP4
0x368	PUSH(POP(@0x364) - POP(@0x341))
0x369	SWAP1
0x36A	SWAP2
0x36B	PUSH(POP(0x2) * POP(@0x368))
0x36C	SWAP4
0x36D	POP()
0x36E	SWAP1
0x36F	SWAP2
0x370	SWAP1
0x371	DUP2
0x377	JUMPI(0x2, !(POP(@0x34E) < POP(@0x34B)))

# Stack: [@0x34E 0x0 @0x36B @0x1E7 [:label9 | :label12] [:label12 | @0x13]]
0x37A	PUSH(MLOAD(0x40))
0x37B	PUSH(0x2)
0x37D	SWAP2
0x37E	SWAP1
0x37F	SWAP2
0x381	PUSH(0x0)
0x383	DUP1
0x38A	DUP1
0x38B	CODECOPY(POP(0x0), 0x416, 0x20)
0x38C	DUP1
0x38D	PUSH(MLOAD(POP(0x0)))
0x38E	SWAP1
0x38F	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x39A	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(POP(@0x38D) + POP(0x2) * POP(@0x34E)))
0x39B	SWAP2
0x39C	SWAP1
0x39D	DUP4
0x39E	SWAP1
0x39F	DUP3
0x3A0	DUP2
0x3A1	DUP2
0x3A2	DUP2
0x3A3	DUP6
0x3A4	DUP9
0x3A5	DUP4
0x3A6	PUSH(CALL(POP(0x0), POP(@0x39A), POP(@0x36B), POP(@0x37A), POP(0x0), POP(@0x37A), POP(0x0)))
0x3A7	POP()
0x3A8	POP()
0x3A9	DUP2
0x3AD	PUSH(SLOAD(0x1))
0x3AE	SWAP2
0x3AF	SWAP3
0x3B0	POP()
0x3B1	DUP2
0x3B3	PUSH(!(POP(@0x3AD) < SLOAD(POP(0x0))))
0x3B4	SWAP1
0x3B5	POP()
0x3B9	JUMPI(0x2, POP(@0x3B3))

# Stack: [@0x3AD 0x0 @0x36B @0x1E7 [:label12 | :label9] [:label12 | @0x13]]
0x3BA	SWAP1
0x3BB	DUP1
0x3BC	MSTORE(POP(0x0), POP(0x0))
0x3BD	PUSH(0x2)
0x3BF	SWAP1
0x3C0	DUP2
0x3C2	PUSH(0x0)
0x3C4	DUP1
0x3CB	DUP1
0x3CC	CODECOPY(POP(0x0), 0x436, 0x20)
0x3CD	DUP1
0x3CE	PUSH(MLOAD(POP(0x0)))
0x3CF	SWAP1
0x3D0	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x3D2	PUSH(SLOAD(POP(@0x3CE) + POP(0x2) * POP(@0x3AD)))
0x3D3	PUSH(0x3)
0x3D5	DUP1
0x3D6	PUSH(SLOAD(POP(0x3)))
0x3D7	SWAP1
0x3D8	SWAP1
0x3D9	SWAP3
0x3DA	PUSH(POP(0x2) * POP(@0x3D2))
0x3DB	SWAP1
0x3DC	PUSH(POP(@0x3D6) - POP(@0x3DA))
0x3DD	SWAP1
0x3DE	SSTORE(POP(0x3), POP(@0x3DC))
0x3DF	PUSH(0x1)
0x3E1	DUP1
0x3E3	DUP1
0x3E4	PUSH(POP(0x1) + SLOAD(POP(0x1)))
0x3E5	SWAP1
0x3E6	SSTORE(POP(0x1), POP(@0x3E4))

:label22
# Stack: [[0x0 | @0x36B] [0x0 | @0x1E7] [:label9 | :label12] [:label12 | @0x13]]
0x3E8	POP()
0x3E9	POP()
0x3EA	JUMP(POP())

:label23
# Stack: [:label12 @0x13]
0x3EE	PUSH(SLOAD(0x4))
0x3F1	PUSH(SLOAD(0x2))
0x3F4	PUSH(MLOAD(0x40))
0x3FC	PUSH(0x2 ** 0xA0 - 0x1)
0x3FD	SWAP1
0x3FE	SWAP1
0x3FF	SWAP3
0x400	PUSH(POP(@0x3FC) & POP(@0x3EE))
0x401	SWAP2
0x402	PUSH(0x0)
0x404	SWAP2
0x405	SWAP1
0x406	DUP3
0x407	DUP2
0x408	DUP2
0x409	DUP2
0x40A	DUP6
0x40B	DUP9
0x40C	DUP4
0x40D	PUSH(CALL(POP(0x0), POP(@0x400), POP(@0x3F1), POP(@0x3F4), POP(0x0), POP(@0x3F4), POP(0x0)))
0x40E	POP()
0x40F	POP()
0x410	POP()
0x413	SSTORE(0x2, POP(0x0))
0x414	POP()
0x415	JUMP(POP(:label12))


