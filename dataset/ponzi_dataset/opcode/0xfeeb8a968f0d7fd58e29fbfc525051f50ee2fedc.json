# Stack: []
0x4	MSTORE(0x40, 0x60)
0xA	JUMPI(:label0, !CALLDATASIZE())

# Stack: []
0x13	PUSH(CALLDATALOAD(0x0) / 0x2 ** 0xE0)
0x19	DUP1
0x1E	JUMPI(:label1, POP(@0x13) == 0x53850DB3)

# Stack: [@0x13]
0x1F	DUP1
0x29	JUMPI(:label2, 0xAD605729 == POP(@0x13))

# Stack: [@0x13]
0x2A	DUP1
0x34	JUMPI(:label3, 0xD014C01F == POP(@0x13))

# Stack: [@0x13]
0x35	DUP1
0x3F	JUMPI(:label6, 0xE67CDFB7 == POP(@0x13))

# Stack: [@0x13]
0x40	DUP1
0x4A	JUMPI(:label8, 0xE837AB59 == POP(@0x13))

# Stack: [@0x13]
0x4B	DUP1
0x55	JUMPI(:label9, 0xFE6DCDBA == POP(@0x13))

:label0
# Stack: []
0x57	PUSH(:label10)
0x5D	JUMP(0x2)

:label1
# Stack: [@0x13]
0x5F	PUSH(:label11)
0x64	PUSH(CALLDATALOAD(0x4))
0x65	PUSH(0x0)
0x67	PUSH(0x0)
0x69	PUSH(0x0)
0x6B	PUSH(0x0)
0x71	POP(0x0)
0x73	DUP5
0x7A	JUMPI(:label16, !!(POP(@0x64) < SLOAD(0x2)))

# Stack: [0x0 0x0 0x0 0x0 @0x64 :label11 @0x13]
0x7E	JUMP(0x2)

:label2
# Stack: [@0x13]
0x82	PUSH(SLOAD(0x2))
0x83	PUSH(0x40)
0x85	DUP1
0x86	PUSH(MLOAD(POP(0x40)))
0x87	SWAP2
0x88	DUP3
0x89	MSTORE(POP(@0x86), POP(@0x82))
0x8A	PUSH(MLOAD(POP(0x40)))
0x8B	SWAP1
0x8C	DUP2
0x8D	SWAP1
0x91	PUSH(0x20 + POP(@0x86) - POP(@0x8A))
0x92	SWAP1
0x93	RETURN(POP(@0x8A), POP(@0x91))

:label3
# Stack: [@0x13]
0x95	PUSH(:label10)
0x9A	PUSH(CALLDATALOAD(0x4))
0x9B	PUSH(CALLVALUE())
0x9C	PUSH(0x0)
0x9E	DUP1
0x9F	DUP1
0xA0	DUP1
0xAA	DUP5
0xAB	PUSH(POP(@0x9B) < 0xDE0B6B3A7640000)
0xAC	DUP1
0xB0	JUMPI(:label4, POP(@0xAB))

# Stack: [@0xAB 0x0 0x0 0x0 0x0 @0x9B @0x9A :label10 @0x13]
0xB1	POP()
0xB2	PUSH(CALLER())
0xBA	PUSH(0x2 ** 0xA0 - 0x1)
0xBB	SWAP1
0xBC	DUP2
0xBE	DUP2
0xBF	MSTORE(POP(0x0), POP(@0xBA) & POP(@0xB2))
0xC0	PUSH(0x20)
0xC2	DUP2
0xC3	SWAP1
0xC4	MSTORE(POP(0x20), POP(0x0))
0xC7	DUP2
0xCB	DUP1
0xCD	PUSH(!(POP(0x0) == SLOAD(SHA3(POP(0x0), 0x40)) & POP(@0xBA)))

:label4
# Stack: [[@0xCD | @0xAB] 0x0 0x0 0x0 0x0 @0x9B @0x9A :label10 @0x13]
0xCF	DUP1
0xD3	JUMPI(:label5, POP())

# Stack: [[@0xAB | @0xCD] 0x0 0x0 0x0 0x0 @0x9B @0x9A :label10 @0x13]
0xD4	POP()
0xDC	PUSH(0x2 ** 0xA0 - 0x1)
0xDD	DUP7
0xDE	DUP2
0xDF	PUSH(POP(@0xDC) & POP(@0x9A))
0xE0	PUSH(0x0)
0xE2	SWAP1
0xE3	DUP2
0xE4	MSTORE(POP(0x0), POP(@0xDF))
0xE5	PUSH(0x20)
0xE7	DUP1
0xE8	SWAP1
0xE9	MSTORE(POP(0x20), POP(0x0))
0xEC	DUP1
0xEE	PUSH(SLOAD(SHA3(POP(0x0), 0x40)))
0xEF	SWAP1
0xF0	SWAP2
0xF2	PUSH(POP(@0xDC) & POP(@0xEE) == POP(0x0))

:label5
# Stack: [[@0xF2 | @0xCD | @0xAB] 0x0 0x0 0x0 0x0 @0x9B @0x9A :label10 @0x13]
0xF8	JUMPI(:label18, !POP())

# Stack: [0x0 0x0 0x0 0x0 @0x9B @0x9A :label10 @0x13]
0xFB	PUSH(MLOAD(0x40))
0x105	PUSH(0x2 ** 0xA0 - 0x1 & CALLER())
0x106	SWAP1
0x107	PUSH(0x0)
0x109	SWAP1
0x10A	PUSH(CALLVALUE())
0x10B	SWAP1
0x10C	DUP3
0x10D	DUP2
0x10E	DUP2
0x10F	DUP2
0x110	DUP6
0x111	DUP9
0x112	DUP4
0x113	PUSH(CALL(POP(0x0), POP(@0x105), POP(@0x10A), POP(@0xFB), POP(0x0), POP(@0xFB), POP(0x0)))
0x114	SWAP4
0x115	POP()
0x116	POP()
0x117	POP()
0x118	POP()
0x119	POP()
0x11D	JUMP(0x2)

:label6
# Stack: [@0x13]
0x11F	PUSH(:label10)
0x124	PUSH(CALLDATALOAD(0x4))
0x125	PUSH(0x0)
0x127	PUSH(0x0)
0x129	PUSH(0x0)
0x12B	PUSH(0x4)
0x12D	PUSH(0x0)
0x12F	SWAP1
0x130	PUSH(SLOAD(POP(0x4)))
0x131	SWAP1
0x135	PUSH(0x100 ** POP(0x0))
0x136	SWAP1
0x149	PUSH(0x2 ** 0xA0 - 0x1 & 0x2 ** 0xA0 - 0x1 & POP(@0x130) / POP(@0x135))
0x14A	PUSH(0x53850DB3)
0x14F	DUP6
0x152	PUSH(MLOAD(0x40))
0x153	DUP3
0x15A	DUP1
0x15B	MSTORE(POP(@0x152), 0x2 ** 0xE0 * POP(0x53850DB3))
0x15E	PUSH(0x4 + POP(@0x152))
0x15F	DUP1
0x160	DUP3
0x161	DUP2
0x162	MSTORE(POP(@0x15E), POP(@0x124))
0x165	PUSH(0x20 + POP(@0x15E))
0x166	SWAP2
0x167	POP()
0x168	POP()
0x16D	PUSH(MLOAD(0x40))
0x16E	DUP1
0x16F	DUP3
0x171	DUP1
0x174	DUP5
0x17A	PUSH(CALL(GAS() - 0x61DA, POP(@0x149), 0x0, POP(@0x16D), POP(@0x165) - POP(@0x16D), POP(@0x16D), 0x60))
0x17F	JUMPI(0x2, !POP(@0x17A))

# Stack: [@0x165 0x53850DB3 @0x149 0x0 0x0 0x0 @0x124 :label10 @0x13]
0x180	POP()
0x181	POP()
0x182	PUSH(0x40)
0x184	DUP1
0x185	PUSH(MLOAD(POP(0x40)))
0x186	DUP1
0x187	PUSH(MLOAD(POP(@0x185)))
0x188	PUSH(0x20)
0x18A	DUP3
0x18B	DUP2
0x18D	PUSH(MLOAD(POP(0x20) + POP(@0x185)))
0x18E	SWAP3
0x18F	DUP5
0x191	PUSH(MLOAD(POP(0x40) + POP(@0x185)))
0x199	PUSH(0x2 ** 0xA0 - 0x1)
0x19A	DUP5
0x19B	DUP2
0x19C	PUSH(POP(@0x199) & POP(@0x18D))
0x19D	SWAP1
0x19E	SWAP8
0x19F	MSTORE(POP(0x0), POP(@0x19C))
0x1A0	SWAP7
0x1A1	SWAP1
0x1A2	MSTORE(POP(0x20), POP(0x0))
0x1A3	SWAP2
0x1A4	DUP7
0x1A6	PUSH(SLOAD(SHA3(POP(0x0), POP(0x40))))
0x1A7	SWAP2
0x1A8	SWAP6
0x1A9	SWAP1
0x1AA	SWAP5
0x1AB	SWAP4
0x1AC	SWAP2
0x1AD	SWAP1
0x1AE	SWAP2
0x1B1	PUSH(!(POP(@0x199) & POP(@0x1A6) == POP(0x0)))
0x1B2	SWAP1
0x1B3	POP()
0x1B4	DUP1
0x1B8	JUMPI(:label7, POP(@0x1B1))

# Stack: [@0x1B1 @0x191 @0x18D @0x187 @0x124 :label10 @0x13]
0x1B9	POP()
0x1BD	DUP4
0x1BF	PUSH(!(POP(@0x124) < SLOAD(0x5)))

:label7
# Stack: [[@0x1BF | @0x1B1] @0x191 @0x18D @0x187 @0x124 :label10 @0x13]
0x1C5	JUMPI(:label13, !POP())

# Stack: [@0x191 @0x18D @0x187 @0x124 :label10 @0x13]
0x1C9	JUMP(0x2)

:label8
# Stack: [@0x13]
0x1CB	PUSH(:label11)
0x1D0	PUSH(CALLDATALOAD(0x4))
0x1D8	PUSH(0x2 ** 0xA0 - 0x1)
0x1D9	DUP2
0x1DA	DUP2
0x1DB	PUSH(POP(@0x1D8) & POP(@0x1D0))
0x1DC	PUSH(0x0)
0x1DE	SWAP1
0x1DF	DUP2
0x1E0	MSTORE(POP(0x0), POP(@0x1DB))
0x1E1	PUSH(0x20)
0x1E3	DUP1
0x1E4	SWAP1
0x1E5	MSTORE(POP(0x20), POP(0x0))
0x1E8	DUP1
0x1ED	PUSH(SLOAD(0x1 + SHA3(POP(0x0), 0x40)))
0x1EE	SWAP1
0x1EF	SWAP2
0x1F0	DUP3
0x1F1	SWAP2
0x1F2	DUP3
0x1F3	SWAP2
0x1F5	DUP1
0x1FB	JUMPI(:label17, !(POP(0x0) == POP(@0x1D8) & POP(@0x1ED)))

# Stack: [0x0 0x0 0x0 @0x1D0 :label11 @0x13]
0x1FF	JUMP(0x2)

:label9
# Stack: [@0x13]
0x201	PUSH(:label12)
0x20F	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(0x3))
0x210	DUP2
0x211	JUMP(POP(:label12))

:label10
# Stack: [@0x13]
0x213	STOP()

:label11
# Stack: [[@0x359 | @0x326] [@0x32C | @0x361] [@0x35C | @0x329] @0x13]
0x215	PUSH(0x40)
0x217	DUP1
0x218	PUSH(MLOAD(POP(0x40)))
0x220	PUSH(0x2 ** 0xA0 - 0x1)
0x221	SWAP5
0x222	DUP6
0x224	DUP1
0x225	MSTORE(POP(@0x218), POP(@0x220) & POP())
0x226	SWAP3
0x227	SWAP1
0x228	SWAP4
0x22C	DUP2
0x22E	MSTORE(POP(@0x218) + 0x20, POP(@0x220) & POP())
0x22F	DUP2
0x230	DUP4
0x232	MSTORE(POP(0x40) + POP(@0x218), POP())
0x233	SWAP1
0x234	PUSH(MLOAD(POP(0x40)))
0x235	SWAP1
0x236	DUP2
0x237	SWAP1
0x23B	PUSH(0x60 + POP(@0x218) - POP(@0x234))
0x23C	SWAP1
0x23D	RETURN(POP(@0x234), POP(@0x23B))

:label12
# Stack: [@0x20F :label12 @0x13]
0x23F	PUSH(0x40)
0x241	DUP1
0x242	PUSH(MLOAD(POP(0x40)))
0x24A	PUSH(0x2 ** 0xA0 - 0x1)
0x24B	SWAP3
0x24C	SWAP1
0x24D	SWAP3
0x24F	DUP2
0x250	MSTORE(POP(@0x242), POP(@0x24A) & POP(@0x20F))
0x251	PUSH(MLOAD(POP(0x40)))
0x252	SWAP1
0x253	DUP2
0x254	SWAP1
0x258	PUSH(0x20 + POP(@0x242) - POP(@0x251))
0x259	SWAP1
0x25A	RETURN(POP(@0x251), POP(@0x258))

:label13
# Stack: [@0x191 @0x18D @0x187 @0x124 :label10 @0x13]
0x25C	PUSH(:label15)
0x25F	DUP4
0x260	DUP4
0x261	DUP4

:label14
# Stack: [[@0x191 | 0x0] [@0x36A | @0x18D] [@0x187 | @0x9A] [:label15 | :label19] [@0x191 | 0x0] [@0x18D | 0x0] [@0x187 | 0x0] [@0x124 | 0x0] [:label10 | @0x9B] [@0x13 | @0x9A]]
0x263	PUSH(0x2)
0x265	DUP1
0x266	PUSH(SLOAD(POP(0x2)))
0x267	PUSH(0x0)
0x269	SWAP1
0x26A	DUP2
0x26B	MSTORE(POP(0x0), POP(@0x266))
0x26C	PUSH(0x1)
0x26E	PUSH(0x20)
0x270	DUP2
0x271	DUP2
0x272	MSTORE(POP(0x20), POP(0x1))
0x273	PUSH(0x40)
0x275	DUP1
0x276	DUP5
0x277	PUSH(SHA3(POP(0x0), POP(0x40)))
0x278	DUP1
0x279	PUSH(SLOAD(POP(@0x277)))
0x28F	PUSH(~0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
0x290	SWAP1
0x291	DUP2
0x293	DUP9
0x294	PUSH(POP() | POP(@0x28F) & POP(@0x279))
0x295	SWAP1
0x296	SWAP2
0x297	SSTORE(POP(@0x277), POP(@0x294))
0x298	DUP2
0x299	PUSH(MLOAD(POP(0x40)))
0x29C	DUP1
0x29E	DUP3
0x29F	MSTORE(POP(0x40), POP(@0x299) + 0x60)
0x2A0	SWAP9
0x2A1	DUP10
0x2A2	MSTORE(POP(@0x299), POP())
0x2A3	DUP9
0x2A4	DUP4
0x2A5	PUSH(POP(0x20) + POP(@0x299))
0x2A6	DUP9
0x2A7	DUP2
0x2A8	MSTORE(POP(@0x2A5), POP())
0x2A9	DUP10
0x2AA	DUP4
0x2AB	PUSH(POP(0x40) + POP(@0x299))
0x2AC	SWAP8
0x2AD	DUP9
0x2AE	MSTORE(POP(@0x2AB), POP())
0x2B6	PUSH(0x2 ** 0xA0 - 0x1)
0x2B7	SWAP9
0x2B8	SWAP1
0x2B9	SWAP9
0x2BB	DUP5
0x2BC	MSTORE(POP(0x0), POP(@0x2B6) & POP())
0x2BD	SWAP2
0x2BE	DUP5
0x2BF	SWAP1
0x2C0	MSTORE(POP(0x20), POP(0x0))
0x2C1	SWAP1
0x2C2	SWAP3
0x2C3	PUSH(SHA3(POP(0x0), POP(0x40)))
0x2C4	SWAP6
0x2C6	DUP6
0x2C8	DUP2
0x2CB	DUP6
0x2CC	SSTORE(POP(@0x2C3), POP(@0x28F) & SLOAD(POP(@0x2C3)) | MLOAD(POP(@0x299)))
0x2CD	SWAP4
0x2CF	DUP5
0x2D0	DUP5
0x2D1	PUSH(POP(0x1) + POP(@0x2C3))
0x2D2	DUP1
0x2D3	PUSH(SLOAD(POP(@0x2D1)))
0x2D4	SWAP1
0x2D5	SWAP2
0x2D7	PUSH(POP(@0x28F) & POP(@0x2D3) | MLOAD(POP(@0x2A5)))
0x2D8	SWAP1
0x2D9	SSTORE(POP(@0x2D1), POP(@0x2D7))
0x2DA	SWAP1
0x2DB	PUSH(MLOAD(POP(@0x2AB)))
0x2DC	SWAP3
0x2DD	DUP2
0x2DE	PUSH(POP(0x2) + POP(@0x2C3))
0x2DF	SWAP3
0x2E0	SWAP1
0x2E1	SWAP3
0x2E2	SSTORE(POP(@0x2DE), POP(@0x2DB))
0x2E3	DUP2
0x2E5	PUSH(SLOAD(POP(0x2)) + POP(0x1))
0x2E6	SWAP1
0x2E7	SSTORE(POP(0x2), POP(@0x2E5))
0x2E8	JUMP(POP())

:label15
# Stack: [@0x191 @0x18D @0x187 @0x124 :label10 @0x13]
0x2EA	POP()
0x2EB	POP()
0x2EC	POP()
0x2ED	POP()
0x2EE	JUMP(POP(:label10))

:label16
# Stack: [0x0 0x0 0x0 0x0 @0x64 :label11 @0x13]
0x2F0	POP()
0x2F1	POP()
0x2F2	POP()
0x2F3	PUSH(0x0)
0x2F5	SWAP2
0x2F6	DUP3
0x2F7	MSTORE(POP(0x0), POP(@0x64))
0x2F8	POP()
0x2F9	PUSH(0x1)
0x2FB	PUSH(0x20)
0x2FD	DUP2
0x2FE	DUP2
0x2FF	MSTORE(POP(0x20), POP(0x1))
0x300	PUSH(0x40)
0x302	DUP1
0x303	DUP5
0x305	PUSH(SLOAD(SHA3(POP(0x0), POP(0x40))))
0x30D	PUSH(0x2 ** 0xA0 - 0x1)
0x30E	SWAP1
0x30F	DUP2
0x311	DUP5
0x312	MSTORE(POP(0x0), POP(@0x30D) & POP(@0x305))
0x313	SWAP2
0x314	DUP5
0x315	SWAP1
0x316	MSTORE(POP(0x20), POP(0x0))
0x317	SWAP1
0x318	SWAP3
0x319	PUSH(SHA3(POP(0x0), POP(0x40)))
0x31A	DUP1
0x31B	PUSH(SLOAD(POP(@0x319)))
0x31C	SWAP2
0x31D	DUP2
0x31F	PUSH(SLOAD(POP(@0x319) + POP(0x1)))
0x320	PUSH(0x2)
0x322	SWAP1
0x323	SWAP1
0x324	SWAP2
0x326	PUSH(SLOAD(POP(0x2) + POP(@0x319)))
0x327	SWAP2
0x328	DUP4
0x329	PUSH(POP(@0x30D) & POP(@0x31B))
0x32A	SWAP4
0x32B	SWAP3
0x32C	PUSH(POP(@0x30D) & POP(@0x31F))
0x32D	SWAP2
0x32E	JUMP(POP(:label11))

:label17
# Stack: [0x0 0x0 0x0 @0x1D0 :label11 @0x13]
0x330	POP()
0x331	POP()
0x332	POP()
0x33A	PUSH(0x2 ** 0xA0 - 0x1)
0x33B	SWAP1
0x33C	DUP2
0x33D	PUSH(POP(@0x33A) & POP(@0x1D0))
0x33E	PUSH(0x0)
0x340	SWAP1
0x341	DUP2
0x342	MSTORE(POP(0x0), POP(@0x33D))
0x343	PUSH(0x20)
0x345	DUP1
0x346	SWAP1
0x347	MSTORE(POP(0x20), POP(0x0))
0x348	PUSH(0x40)
0x34A	SWAP1
0x34B	PUSH(SHA3(POP(0x0), POP(0x40)))
0x34C	DUP1
0x34D	PUSH(SLOAD(POP(@0x34B)))
0x350	DUP1
0x352	PUSH(SLOAD(POP(@0x34B) + 0x1))
0x353	PUSH(0x2)
0x355	SWAP1
0x356	SWAP1
0x357	SWAP2
0x359	PUSH(SLOAD(POP(0x2) + POP(@0x34B)))
0x35A	SWAP1
0x35B	DUP4
0x35C	PUSH(POP(@0x33A) & POP(@0x34D))
0x35D	SWAP4
0x35E	SWAP2
0x35F	SWAP1
0x360	SWAP3
0x361	PUSH(POP(@0x33A) & POP(@0x352))
0x362	SWAP2
0x363	SWAP1
0x364	JUMP(POP(:label11))

:label18
# Stack: [0x0 0x0 0x0 0x0 @0x9B @0x9A :label10 @0x13]
0x366	PUSH(:label19)
0x369	DUP7
0x36A	PUSH(CALLER())
0x36B	PUSH(0x0)
0x370	JUMP(:label14)

:label19
# Stack: [0x0 0x0 0x0 0x0 @0x9B @0x9A :label10 @0x13]
0x372	DUP6
0x373	SWAP4
0x374	POP()
0x375	DUP5
0x376	SWAP3
0x377	POP()
0x378	PUSH(0x1)
0x37A	SWAP2
0x37B	POP()

:label20
# Stack: [[0x0 | @0x3A8] [0x1 | @0x3F1] [@0x9B | @0x3EA] [@0x3E4 | @0x9A] @0x9B @0x9A :label10 @0x13]
0x37F	PUSH(SLOAD(0x3))
0x387	PUSH(0x2 ** 0xA0 - 0x1)
0x388	SWAP1
0x389	DUP2
0x38A	PUSH(POP(@0x387) & POP(@0x37F))
0x38B	SWAP1
0x38C	DUP6
0x38E	PUSH(POP() & POP(@0x387) == POP(@0x38A))
0x38F	DUP1
0x390	PUSH(!POP(@0x38E))
0x391	SWAP1
0x395	JUMPI(:label21, POP(@0x38E))

# Stack: [@0x390 [0x0 | @0x3A8] [0x1 | @0x3F1] [@0x9B | @0x3EA] [@0x3E4 | @0x9A] @0x9B @0x9A :label10 @0x13]
0x396	POP()
0x399	DUP2
0x39A	PUSH(POP() < 0x7)

:label21
# Stack: [[@0x39A | @0x390] [0x0 | @0x3A8] [0x1 | @0x3F1] [@0x9B | @0x3EA] [@0x9A | @0x3E4] @0x9B @0x9A :label10 @0x13]
0x3A0	JUMPI(:label22, !POP())

# Stack: [[0x0 | @0x3A8] [0x1 | @0x3F1] [@0x9B | @0x3EA] [@0x9A | @0x3E4] @0x9B @0x9A :label10 @0x13]
0x3A1	POP()
0x3A4	PUSH(MLOAD(0x40))
0x3A7	DUP3
0x3A8	PUSH(POP() / 0x2)
0x3A9	SWAP1
0x3B2	DUP5
0x3B3	PUSH(POP() & 0x2 ** 0xA0 - 0x1)
0x3B4	SWAP1
0x3B5	PUSH(0x0)
0x3B7	SWAP1
0x3B8	DUP4
0x3B9	SWAP1
0x3BA	DUP3
0x3BB	DUP2
0x3BC	DUP2
0x3BD	DUP2
0x3BE	DUP6
0x3BF	DUP9
0x3C0	DUP4
0x3C1	PUSH(CALL(POP(0x0), POP(@0x3B3), POP(@0x3A8), POP(@0x3A4), POP(0x0), POP(@0x3A4), POP(0x0)))
0x3C2	POP()
0x3C3	POP()
0x3C4	POP()
0x3C5	SWAP1
0x3C6	DUP2
0x3C7	MSTORE(POP(0x0), POP(@0x3B3))
0x3C8	PUSH(0x20)
0x3CA	DUP1
0x3CB	SWAP1
0x3CC	MSTORE(POP(0x20), POP(0x0))
0x3CD	PUSH(0x40)
0x3CF	SWAP1
0x3D0	PUSH(SHA3(POP(0x0), POP(0x40)))
0x3D3	DUP1
0x3D4	PUSH(POP(@0x3D0) + 0x2)
0x3D5	DUP1
0x3D7	DUP3
0x3D8	PUSH(POP(@0x3A8) + SLOAD(POP(@0x3D4)))
0x3D9	SWAP1
0x3DA	SSTORE(POP(@0x3D4), POP(@0x3D8))
0x3E4	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(POP(@0x3D0)))
0x3E5	SWAP4
0x3E6	POP()
0x3E7	SWAP2
0x3E8	DUP3
0x3E9	SWAP1
0x3EA	PUSH(POP() - POP(@0x3A8))
0x3EB	SWAP2
0x3EC	PUSH(0x1)
0x3EE	SWAP2
0x3EF	SWAP1
0x3F0	SWAP2
0x3F1	PUSH(POP(0x1) + POP())
0x3F2	SWAP1
0x3F6	JUMP(:label20)

:label22
# Stack: [[@0x3A8 | 0x0] [@0x3F1 | 0x1] [@0x3EA | @0x9B] [@0x3E4 | @0x9A] @0x9B @0x9A :label10 @0x13]
0x3FA	PUSH(MLOAD(0x40))
0x403	DUP5
0x404	PUSH(POP() & 0x2 ** 0xA0 - 0x1)
0x405	SWAP1
0x406	PUSH(0x0)
0x408	SWAP1
0x409	DUP6
0x40A	SWAP1
0x40B	DUP3
0x40C	DUP2
0x40D	DUP2
0x40E	DUP2
0x40F	DUP6
0x410	DUP9
0x411	DUP4
0x412	PUSH(CALL(POP(0x0), POP(@0x404), POP(), POP(@0x3FA), POP(0x0), POP(@0x3FA), POP(0x0)))
0x413	POP()
0x414	POP()
0x415	POP()
0x416	SWAP1
0x417	DUP2
0x418	MSTORE(POP(0x0), POP(@0x404))
0x419	PUSH(0x20)
0x41B	DUP1
0x41C	SWAP1
0x41D	MSTORE(POP(0x20), POP(0x0))
0x41E	PUSH(0x40)
0x420	SWAP1
0x424	PUSH(0x2 + SHA3(POP(0x0), POP(0x40)))
0x425	DUP1
0x427	DUP4
0x428	PUSH(POP() + SLOAD(POP(@0x424)))
0x429	SWAP1
0x42A	SSTORE(POP(@0x424), POP(@0x428))
0x42B	POP()
0x42C	POP()
0x42D	POP()
0x42E	POP()
0x42F	POP()
0x430	POP()
0x431	JUMP(POP(:label10))


