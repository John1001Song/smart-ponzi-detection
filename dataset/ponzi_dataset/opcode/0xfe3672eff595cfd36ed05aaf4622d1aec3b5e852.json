# Stack: []
0x4	MSTORE(0x40, 0x60)
0xA	JUMPI(:label0, !CALLDATASIZE())

# Stack: []
0x13	PUSH(CALLDATALOAD(0x0) / 0x2 ** 0xE0)
0x19	DUP1
0x1E	JUMPI(:label1, POP(@0x13) == 0x92A1820)

# Stack: [@0x13]
0x1F	DUP1
0x29	JUMPI(:label2, 0x13AF4035 == POP(@0x13))

# Stack: [@0x13]
0x2A	DUP1
0x34	JUMPI(:label4, 0x8DA5CB5B == POP(@0x13))

# Stack: [@0x13]
0x35	DUP1
0x3F	JUMPI(:label5, 0x9003ADFE == POP(@0x13))

# Stack: [@0x13]
0x40	DUP1
0x4A	JUMPI(:label6, 0xA60F3588 == POP(@0x13))

# Stack: [@0x13]
0x4B	DUP1
0x55	JUMPI(:label7, 0xB69EF8A8 == POP(@0x13))

# Stack: [@0x13]
0x56	DUP1
0x60	JUMPI(:label8, 0xE97DCB62 == POP(@0x13))

:label0
# Stack: []
0x62	PUSH(:label11)
0x65	PUSH(:label12)
0x6B	JUMP(:label9)

:label1
# Stack: [@0x13]
0x6D	PUSH(:label13)
0x72	PUSH(CALLDATALOAD(0x4))
0x73	PUSH(0x0)
0x75	DUP1
0x76	PUSH(SLOAD(POP(0x0)))
0x77	DUP2
0x78	SWAP1
0x79	DUP2
0x7F	JUMPI(0x2, !(POP(@0x72) < POP(@0x76)))

# Stack: [@0x72 0x0 @0x72 :label13 @0x13]
0x80	POP()
0x81	DUP1
0x82	MSTORE(POP(0x0), POP(0x0))
0x85	PUSH(0x2 * POP(@0x72))
0xA7	DUP1
0xA9	PUSH(SLOAD(POP(@0x85) + 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563))
0xAA	PUSH(0x0)
0xAC	DUP1
0xB3	DUP1
0xB4	CODECOPY(POP(0x0), 0x3D8, 0x20)
0xB5	DUP1
0xB6	PUSH(MLOAD(POP(0x0)))
0xB7	SWAP1
0xB8	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0xB9	SWAP1
0xBA	SWAP1
0xBB	SWAP2
0xBD	PUSH(SLOAD(POP(@0xB6) + POP(@0x85)))
0xC5	PUSH(0x2 ** 0xA0 - 0x1)
0xC6	SWAP2
0xC7	SWAP1
0xC8	SWAP2
0xC9	PUSH(POP(@0xC5) & POP(@0xA9))
0xCA	SWAP1
0xCB	DUP3
0xCC	JUMP(POP(:label13))

:label2
# Stack: [@0x13]
0xCE	PUSH(:label11)
0xD3	PUSH(CALLDATALOAD(0x4))
0xD6	PUSH(SLOAD(0x4))
0xD7	PUSH(CALLER())
0xDF	PUSH(0x2 ** 0xA0 - 0x1)
0xE0	SWAP1
0xE1	DUP2
0xE2	PUSH(POP(@0xDF) & POP(@0xD7))
0xE3	SWAP1
0xEA	JUMPI(:label3, !(POP(@0xD6) & POP(@0xDF) == POP(@0xE2)))

# Stack: [@0xD3 :label11 @0x13]
0xEB	PUSH(0x4)
0xED	DUP1
0xF9	DUP2
0xFA	PUSH(POP(@0xD3) | ~(0x2 ** 0xA0 - 0x1) & SLOAD(POP(0x4)))
0xFB	SWAP1
0xFC	SSTORE(POP(0x4), POP(@0xFA))

:label3
# Stack: [@0xD3 :label11 @0x13]
0xFE	POP()
0xFF	JUMP(POP(:label11))

:label4
# Stack: [@0x13]
0x101	PUSH(:label14)
0x10F	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(0x4))
0x110	DUP2
0x111	JUMP(POP(:label14))

:label5
# Stack: [@0x13]
0x113	PUSH(:label15)
0x118	PUSH(SLOAD(0x2))
0x119	DUP2
0x11A	JUMP(POP(:label15))

:label6
# Stack: [@0x13]
0x11C	PUSH(:label15)
0x121	PUSH(SLOAD(0x1))
0x122	DUP2
0x123	JUMP(POP(:label15))

:label7
# Stack: [@0x13]
0x125	PUSH(:label15)
0x12A	PUSH(SLOAD(0x3))
0x12B	DUP2
0x12C	JUMP(POP(:label15))

:label8
# Stack: [@0x13]
0x12E	PUSH(:label11)

:label9
# Stack: [[:label12 | :label11] [:label11 | @0x13]]
0x132	PUSH(0x0)
0x134	DUP1
0x135	PUSH(SLOAD(POP(0x0)))
0x138	DUP1
0x139	PUSH(POP(@0x135) + 0x1)
0x13A	DUP1
0x13B	DUP4
0x13C	SSTORE(POP(0x0), POP(@0x139))
0x13D	SWAP1
0x13E	SWAP2
0x13F	SWAP1
0x140	DUP2
0x141	DUP2
0x142	DUP5
0x143	DUP1
0x144	PUSH(!POP(@0x135))
0x145	DUP2
0x146	SWAP1
0x14B	JUMPI(:label16, POP(@0x144) > POP(@0x139))

# Stack: [@0x135 @0x139 0x0 @0x139 0x0 @0x135 [:label12 | :label11] [:label11 | @0x13]]
0x14E	PUSH(0x2 * POP(@0x135))
0x14F	DUP1
0x153	DUP2
0x156	MSTORE(0x0, POP(0x0))
0x15B	PUSH(SHA3(0x0, 0x20))
0x15C	SWAP1
0x15D	DUP2
0x15E	PUSH(POP(@0x15B) + POP(@0x14E))
0x15F	SWAP1
0x160	PUSH(POP(@0x15B) + 0x2 * POP(@0x139))
0x161	PUSH(:label16)
0x164	SWAP2
0x165	SWAP1

:label10
# Stack: [[@0x160 | @0x184] @0x15E :label16 @0x139 0x0 @0x139 0x0 @0x135 [:label12 | :label11] [@0x13 | :label11]]
0x167	DUP1
0x168	DUP3
0x16E	JUMPI(:label17, !(POP(@0x15E) > POP()))

# Stack: [[@0x184 | @0x160] @0x15E :label16 @0x139 0x0 @0x139 0x0 @0x135 [:label11 | :label12] [:label11 | @0x13]]
0x16F	DUP1
0x17B	DUP1
0x17C	SSTORE(POP(), ~(0x2 ** 0xA0 - 0x1) & SLOAD(POP()))
0x17D	PUSH(0x0)
0x17F	PUSH(0x1)
0x181	SWAP1
0x182	SWAP1
0x183	SWAP2
0x184	PUSH(POP(0x1) + POP())
0x185	SWAP1
0x186	DUP2
0x187	SSTORE(POP(@0x184), POP(0x0))
0x18B	JUMP(:label10)

:label11
# Stack: []
0x18D	STOP()

:label12
# Stack: [:label11]
0x18F	JUMP(POP(:label11))

:label13
# Stack: [@0xBD @0xC9 :label13 @0x13]
0x193	PUSH(MLOAD(0x40))
0x194	DUP1
0x195	DUP4
0x19F	DUP1
0x1A0	MSTORE(POP(@0x193), 0x2 ** 0xA0 - 0x1 & POP(@0xC9))
0x1A3	PUSH(0x20 + POP(@0x193))
0x1A4	DUP3
0x1A5	DUP2
0x1A6	MSTORE(POP(@0x1A3), POP(@0xBD))
0x1A9	PUSH(0x20 + POP(@0x1A3))
0x1AA	SWAP3
0x1AB	POP()
0x1AC	POP()
0x1AD	POP()
0x1B0	PUSH(MLOAD(0x40))
0x1B1	DUP1
0x1B2	SWAP2
0x1B3	PUSH(POP(@0x1A9) - POP(@0x1B0))
0x1B4	SWAP1
0x1B5	RETURN(POP(@0x1B0), POP(@0x1B3))

:label14
# Stack: [@0x10F :label14 @0x13]
0x1B7	PUSH(0x40)
0x1B9	DUP1
0x1BA	PUSH(MLOAD(POP(0x40)))
0x1C2	PUSH(0x2 ** 0xA0 - 0x1)
0x1C3	SWAP3
0x1C4	SWAP1
0x1C5	SWAP3
0x1C7	DUP2
0x1C8	MSTORE(POP(@0x1BA), POP(@0x1C2) & POP(@0x10F))
0x1C9	PUSH(MLOAD(POP(0x40)))
0x1CA	SWAP1
0x1CB	DUP2
0x1CC	SWAP1
0x1D0	PUSH(0x20 + POP(@0x1BA) - POP(@0x1C9))
0x1D1	SWAP1
0x1D2	RETURN(POP(@0x1C9), POP(@0x1D0))

:label15
# Stack: [[@0x12A | @0x121 | @0x118] [:label15 | :label15 | :label15] @0x13]
0x1D4	PUSH(0x40)
0x1D6	DUP1
0x1D7	PUSH(MLOAD(POP(0x40)))
0x1D8	SWAP2
0x1D9	DUP3
0x1DA	MSTORE(POP(@0x1D7), POP())
0x1DB	PUSH(MLOAD(POP(0x40)))
0x1DC	SWAP1
0x1DD	DUP2
0x1DE	SWAP1
0x1E2	PUSH(0x20 + POP(@0x1D7) - POP(@0x1DB))
0x1E3	SWAP1
0x1E4	RETURN(POP(@0x1DB), POP(@0x1E2))

:label16
# Stack: [[@0x15E | @0x135] @0x139 0x0 @0x139 0x0 @0x135 [:label12 | :label11] [:label11 | @0x13]]
0x1E6	POP()
0x1E7	POP()
0x1E8	POP()
0x1E9	POP()
0x1EA	PUSH(CALLER())
0x1EB	PUSH(0x0)
0x1EF	POP(0x0)
0x1F0	DUP4
0x1F1	DUP2
0x1F3	DUP1
0x1F9	JUMPI(0x2, !(POP(@0x135) < SLOAD(POP(0x0))))

# Stack: [@0x135 0x0 @0x1EA 0x0 @0x135 [:label12 | :label11] [:label11 | @0x13]]
0x1FA	DUP2
0x1FB	DUP1
0x1FC	MSTORE(POP(0x0), POP(0x0))
0x221	PUSH(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 + 0x2 * POP(@0x135))
0x222	DUP1
0x22D	PUSH(~(0x2 ** 0xA0 - 0x1) & SLOAD(POP(@0x221)))
0x22E	SWAP1
0x22F	SWAP3
0x230	PUSH(POP(@0x1EA) | POP(@0x22D))
0x231	SWAP1
0x232	SWAP2
0x233	SSTORE(POP(@0x221), POP(@0x230))
0x234	DUP1
0x235	PUSH(SLOAD(POP(0x0)))
0x236	PUSH(CALLVALUE())
0x237	SWAP1
0x238	SWAP1
0x239	DUP5
0x23A	SWAP1
0x23B	DUP2
0x241	JUMPI(0x2, !(POP(@0x135) < POP(@0x235)))

# Stack: [@0x135 0x0 @0x236 0x0 @0x135 [:label12 | :label11] [:label11 | @0x13]]
0x245	PUSH(0x0)
0x247	DUP1
0x24E	DUP1
0x24F	CODECOPY(POP(0x0), 0x3D8, 0x20)
0x250	DUP1
0x251	PUSH(MLOAD(POP(0x0)))
0x252	SWAP1
0x253	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x254	PUSH(POP(@0x251) + 0x2 * POP(@0x135))
0x255	SWAP2
0x256	SWAP1
0x257	SWAP2
0x258	SSTORE(POP(@0x254), POP(@0x236))
0x259	DUP3
0x25E	JUMPI(:label18, POP(@0x135) == POP(0x0))

# Stack: [0x0 @0x135 [:label12 | :label11] [:label11 | @0x13]]
0x262	PUSH(CALLVALUE() / 0xA)
0x263	PUSH(0x2)
0x265	DUP1
0x266	SWAP1
0x267	SSTORE(POP(0x2), POP(@0x262))
0x26A	PUSH(SLOAD(0x4))
0x26D	PUSH(MLOAD(0x40))
0x275	PUSH(0x2 ** 0xA0 - 0x1)
0x276	SWAP1
0x277	SWAP1
0x278	SWAP2
0x279	PUSH(POP(@0x275) & POP(@0x26A))
0x27A	SWAP2
0x27B	PUSH(0x0)
0x27D	SWAP2
0x27E	DUP3
0x27F	DUP2
0x280	DUP2
0x281	DUP2
0x282	DUP6
0x283	DUP9
0x284	DUP4
0x285	PUSH(CALL(POP(0x0), POP(@0x279), POP(@0x262), POP(@0x26D), POP(0x0), POP(@0x26D), POP(0x0)))
0x286	POP()
0x287	POP()
0x288	POP()
0x28B	SSTORE(0x2, POP(0x0))
0x28C	POP()
0x28D	PUSH(0x3)
0x28F	DUP1
0x298	PUSH(CALLVALUE() * 0x9 / 0xA + SLOAD(POP(0x3)))
0x299	SWAP1
0x29A	SSTORE(POP(0x3), POP(@0x298))
0x29E	JUMP(:label19)

:label17
# Stack: [[@0x184 | @0x160] @0x15E :label16 @0x139 0x0 @0x139 0x0 @0x135 [:label12 | :label11] [:label11 | @0x13]]
0x2A0	POP()
0x2A1	SWAP1
0x2A2	JUMP(POP(:label16))

:label18
# Stack: [0x0 @0x135 [:label12 | :label11] [:label11 | @0x13]]
0x2A7	SSTORE(0x3, CALLVALUE())

:label19
# Stack: [0x0 @0x135 [:label12 | :label11] [:label11 | @0x13]]
0x2AB	PUSH(SLOAD(0x1))
0x2AC	PUSH(0x0)
0x2AE	DUP1
0x2AF	PUSH(SLOAD(POP(0x0)))
0x2B0	PUSH(0x5)
0x2B2	SWAP2
0x2B3	SWAP1
0x2B4	DUP2
0x2BA	JUMPI(0x2, !(POP(@0x2AB) < POP(@0x2AF)))

# Stack: [@0x2AB 0x0 0x5 0x0 @0x135 [:label12 | :label11] [:label11 | @0x13]]
0x2BB	SWAP1
0x2BC	DUP1
0x2BD	MSTORE(POP(0x0), POP(0x0))
0x2C0	PUSH(SLOAD(0x3))
0x2C1	PUSH(0x2)
0x2C3	SWAP1
0x2C4	SWAP1
0x2C5	SWAP2
0x2C7	PUSH(0x0)
0x2C9	DUP1
0x2D0	DUP1
0x2D1	CODECOPY(POP(0x0), 0x3D8, 0x20)
0x2D2	DUP1
0x2D3	PUSH(MLOAD(POP(0x0)))
0x2D4	SWAP1
0x2D5	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x2DA	PUSH(0x7 * SLOAD(POP(@0x2D3) + POP(0x2) * POP(@0x2AB)))
0x2DB	SWAP2
0x2DC	SWAP1
0x2DD	SWAP2
0x2DE	PUSH(POP(@0x2DA) / POP(0x5))
0x2DF	SWAP1
0x2E5	JUMPI(:label20, !(POP(@0x2C0) > POP(@0x2DE)))

# Stack: [0x0 @0x135 [:label12 | :label11] [:label11 | @0x13]]
0x2E8	PUSH(SLOAD(0x1))
0x2E9	PUSH(0x0)
0x2EB	DUP1
0x2EC	PUSH(SLOAD(POP(0x0)))
0x2ED	PUSH(0xA)
0x2EF	SWAP2
0x2F0	SWAP1
0x2F1	DUP2
0x2F7	JUMPI(0x2, !(POP(@0x2E8) < POP(@0x2EC)))

# Stack: [@0x2E8 0x0 0xA 0x0 @0x135 [:label12 | :label11] [:label11 | @0x13]]
0x2FA	PUSH(SLOAD(0x1))
0x2FB	DUP3
0x2FC	PUSH(SLOAD(POP(0x0)))
0x2FD	PUSH(0x2)
0x2FF	SWAP2
0x300	SWAP1
0x301	SWAP3
0x303	PUSH(0x0)
0x305	DUP1
0x30C	DUP1
0x30D	CODECOPY(POP(0x0), 0x3D8, 0x20)
0x30E	DUP1
0x30F	PUSH(MLOAD(POP(0x0)))
0x310	SWAP1
0x311	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x313	PUSH(SLOAD(POP(@0x30F) + POP(0x2) * POP(@0x2E8)))
0x314	SWAP4
0x315	SWAP1
0x316	SWAP4
0x317	PUSH(POP(@0x313) / POP(0xA))
0x318	SWAP3
0x319	SWAP1
0x31A	DUP2
0x320	JUMPI(0x2, !(POP(@0x2FA) < POP(@0x2FC)))

# Stack: [@0x2FA 0x0 @0x317 0x0 @0x135 [:label12 | :label11] [@0x13 | :label11]]
0x323	PUSH(SLOAD(0x1))
0x324	DUP3
0x325	PUSH(SLOAD(POP(0x0)))
0x326	PUSH(0x2)
0x328	SWAP2
0x329	SWAP1
0x32A	SWAP3
0x32C	PUSH(0x0)
0x32E	DUP1
0x335	DUP1
0x336	CODECOPY(POP(0x0), 0x3D8, 0x20)
0x337	DUP1
0x338	PUSH(MLOAD(POP(0x0)))
0x339	SWAP1
0x33A	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x33C	PUSH(SLOAD(POP(@0x338) + POP(0x2) * POP(@0x2FA)))
0x33D	SWAP4
0x33E	SWAP1
0x33F	SWAP4
0x340	PUSH(POP(@0x33C) - POP(@0x317))
0x341	SWAP4
0x342	POP()
0x343	SWAP1
0x344	SWAP2
0x345	SWAP1
0x346	DUP2
0x34C	JUMPI(0x2, !(POP(@0x323) < POP(@0x325)))

# Stack: [@0x323 0x0 @0x340 @0x135 [:label12 | :label11] [:label11 | @0x13]]
0x34F	PUSH(MLOAD(0x40))
0x350	PUSH(0x2)
0x352	SWAP2
0x353	SWAP1
0x354	SWAP2
0x381	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 + POP(0x2) * POP(@0x323)))
0x382	SWAP2
0x383	SWAP1
0x384	DUP4
0x385	SWAP1
0x386	DUP3
0x387	DUP2
0x388	DUP2
0x389	DUP2
0x38A	DUP6
0x38B	DUP9
0x38C	DUP4
0x38D	PUSH(CALL(POP(0x0), POP(@0x381), POP(@0x340), POP(@0x34F), POP(0x0), POP(@0x34F), POP(0x0)))
0x38E	POP()
0x38F	POP()
0x392	PUSH(SLOAD(0x1))
0x393	DUP3
0x394	PUSH(SLOAD(POP(0x0)))
0x395	PUSH(0x5)
0x397	SWAP4
0x398	POP()
0x399	SWAP1
0x39A	SWAP2
0x39B	POP()
0x39C	DUP2
0x3A2	JUMPI(0x2, !(POP(@0x392) < POP(@0x394)))

# Stack: [@0x392 0x0 0x5 @0x340 @0x135 [:label12 | :label11] [@0x13 | :label11]]
0x3A3	SWAP1
0x3A4	DUP1
0x3A5	MSTORE(POP(0x0), POP(0x0))
0x3A6	PUSH(0x3)
0x3A8	DUP1
0x3A9	PUSH(SLOAD(POP(0x3)))
0x3AA	PUSH(0x2)
0x3AC	SWAP2
0x3AD	SWAP1
0x3AE	SWAP3
0x3B0	PUSH(0x0)
0x3B2	DUP1
0x3B9	DUP1
0x3BA	CODECOPY(POP(0x0), 0x3D8, 0x20)
0x3BB	DUP1
0x3BC	PUSH(MLOAD(POP(0x0)))
0x3BD	SWAP1
0x3BE	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x3C3	PUSH(0x7 * SLOAD(POP(@0x3BC) + POP(0x2) * POP(@0x392)))
0x3C4	SWAP3
0x3C5	SWAP1
0x3C6	SWAP3
0x3C7	PUSH(POP(@0x3C3) / POP(0x5))
0x3C8	SWAP1
0x3C9	PUSH(POP(@0x3A9) - POP(@0x3C7))
0x3CA	SWAP1
0x3CB	SSTORE(POP(0x3), POP(@0x3C9))
0x3CC	PUSH(0x1)
0x3CE	DUP1
0x3D0	DUP1
0x3D1	PUSH(POP(0x1) + SLOAD(POP(0x1)))
0x3D2	SWAP1
0x3D3	SSTORE(POP(0x1), POP(@0x3D1))

:label20
# Stack: [[0x0 | @0x340] @0x135 [:label12 | :label11] [@0x13 | :label11]]
0x3D5	POP()
0x3D6	POP()
0x3D7	JUMP(POP())


