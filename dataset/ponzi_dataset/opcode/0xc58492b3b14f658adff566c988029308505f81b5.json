# Stack: []
0x4	MSTORE(0x40, 0x60)
0xA	JUMPI(:label0, !CALLDATASIZE())

# Stack: []
0xD	PUSH(CALLDATALOAD(0x0))
0xE	PUSH(0x100000000000000000000000000000000000000000000000000000000)
0x2C	SWAP1
0x33	PUSH(0xFFFFFFFF & POP(@0xD) / POP(0x100000000000000000000000000000000000000000000000000000000))
0x34	DUP1
0x3E	JUMPI(:label7, 0x146CA531 == POP(@0x33))

# Stack: [@0x33]
0x3F	DUP1
0x49	JUMPI(:label10, 0x50F956DB == POP(@0x33))

# Stack: [@0x33]
0x4A	DUP1
0x54	JUMPI(:label13, 0x544F113B == POP(@0x33))

# Stack: [@0x33]
0x55	DUP1
0x5F	JUMPI(:label16, 0x8EA95CBC == POP(@0x33))

# Stack: [@0x33]
0x60	DUP1
0x6A	JUMPI(:label19, 0xFD9F6856 == POP(@0x33))

:label0
# Stack: []
0x6C	PUSH(:label6)

# Stack: [:label6]
0x7A	JUMPI(:label2, !(SLOAD(0x0) == 0x1))

# Stack: [:label6]
0x85	JUMPI(:label1, !!(CALLVALUE() == SLOAD(0x3)))

# Stack: [:label6]
0x86	PUSH(0x0)
0x88	PUSH(0x0)
0x8A	REVERT()

:label1
# Stack: [:label6]
0x8F	JUMP(:label4)

:label2
# Stack: [:label6]
0x91	PUSH(:label3)
0x94	PUSH(CALLVALUE())
0x98	JUMP(:label22)

:label3
# Stack: [:label6]
0x9A	PUSH(0x1)
0x9C	PUSH(0x0)
0x9E	SWAP1
0x9F	PUSH(SLOAD(POP(0x1)))
0xA0	SWAP1
0xA4	PUSH(0x100 ** POP(0x0))
0xA5	SWAP1
0xD2	PUSH(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & POP(@0x9F) / POP(@0xA4))
0xD3	PUSH(0x8FC)
0xD6	PUSH(CALLVALUE())
0xD7	SWAP1
0xD8	DUP2
0xDA	PUSH(!POP(@0xD6) * POP(0x8FC))
0xDB	SWAP1
0xDE	PUSH(MLOAD(0x40))
0xDF	DUP1
0xE0	SWAP1
0xE1	POP()
0xE6	PUSH(MLOAD(0x40))
0xE7	DUP1
0xE8	DUP3
0xEA	DUP1
0xEB	DUP4
0xEC	DUP7
0xED	DUP7
0xEE	PUSH(CALL(POP(@0xDA), POP(@0xD2), POP(@0xD6), POP(@0xE6), POP(@0xDE) - POP(@0xE6), POP(@0xE6), 0x0))
0xEF	SWAP4
0xF0	POP()
0xF1	POP()
0xF2	POP()
0xF3	POP()
0xF4	POP()

:label4
# Stack: [:label6]
0xF6	PUSH(CALLVALUE())
0xF7	PUSH(0x2)
0xF9	DUP1
0xFA	SWAP1
0xFB	SSTORE(POP(0x2), POP(@0xF6))
0xFC	POP()
0xFD	PUSH(CALLER())
0xFE	PUSH(0x1)
0x105	PUSH(0x100 ** 0x0)
0x106	DUP2
0x108	DUP1
0x120	PUSH(~(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF * POP(@0x105)) & SLOAD(POP(0x1)))
0x121	SWAP1
0x122	DUP4
0x13A	PUSH((0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & POP(@0xFD)) * POP(@0x105) | POP(@0x120))
0x13B	SWAP1
0x13C	SSTORE(POP(0x1), POP(@0x13A))
0x13D	POP()
0x141	PUSH(CALLVALUE() * 0x2)
0x142	PUSH(0x4)
0x144	DUP1
0x145	SWAP1
0x146	SSTORE(POP(0x4), POP(@0x141))
0x147	POP()
0x148	PUSH(:label5)
0x14E	JUMP(:label24)

:label5
# Stack: [:label6]
0x151	JUMP(POP(:label6))

:label6
# Stack: []
0x153	STOP()

:label7
# Stack: [@0x33]
0x15A	JUMPI(:label8, !CALLVALUE())

# Stack: [@0x33]
0x15B	INVALID()

:label8
# Stack: [@0x33]
0x15D	PUSH(:label9)
0x163	JUMP(:label25)

:label9
# Stack: [@0x268 :label9 @0x33]
0x167	PUSH(MLOAD(0x40))
0x168	DUP1
0x169	DUP3
0x16A	DUP2
0x16B	MSTORE(POP(@0x167), POP(@0x268))
0x16E	PUSH(0x20 + POP(@0x167))
0x16F	SWAP2
0x170	POP()
0x171	POP()
0x174	PUSH(MLOAD(0x40))
0x175	DUP1
0x176	SWAP2
0x177	PUSH(POP(@0x16E) - POP(@0x174))
0x178	SWAP1
0x179	RETURN(POP(@0x174), POP(@0x177))

:label10
# Stack: [@0x33]
0x180	JUMPI(:label11, !CALLVALUE())

# Stack: [@0x33]
0x181	INVALID()

:label11
# Stack: [@0x33]
0x183	PUSH(:label12)
0x189	JUMP(:label26)

:label12
# Stack: [@0x26E :label12 @0x33]
0x18D	PUSH(MLOAD(0x40))
0x18E	DUP1
0x18F	DUP3
0x190	DUP2
0x191	MSTORE(POP(@0x18D), POP(@0x26E))
0x194	PUSH(0x20 + POP(@0x18D))
0x195	SWAP2
0x196	POP()
0x197	POP()
0x19A	PUSH(MLOAD(0x40))
0x19B	DUP1
0x19C	SWAP2
0x19D	PUSH(POP(@0x194) - POP(@0x19A))
0x19E	SWAP1
0x19F	RETURN(POP(@0x19A), POP(@0x19D))

:label13
# Stack: [@0x33]
0x1A6	JUMPI(:label14, !CALLVALUE())

# Stack: [@0x33]
0x1A7	INVALID()

:label14
# Stack: [@0x33]
0x1A9	PUSH(:label15)
0x1AF	JUMP(:label27)

:label15
# Stack: [@0x274 :label15 @0x33]
0x1B3	PUSH(MLOAD(0x40))
0x1B4	DUP1
0x1B5	DUP3
0x1B6	DUP2
0x1B7	MSTORE(POP(@0x1B3), POP(@0x274))
0x1BA	PUSH(0x20 + POP(@0x1B3))
0x1BB	SWAP2
0x1BC	POP()
0x1BD	POP()
0x1C0	PUSH(MLOAD(0x40))
0x1C1	DUP1
0x1C2	SWAP2
0x1C3	PUSH(POP(@0x1BA) - POP(@0x1C0))
0x1C4	SWAP1
0x1C5	RETURN(POP(@0x1C0), POP(@0x1C3))

:label16
# Stack: [@0x33]
0x1CC	JUMPI(:label17, !CALLVALUE())

# Stack: [@0x33]
0x1CD	INVALID()

:label17
# Stack: [@0x33]
0x1CF	PUSH(:label18)
0x1D5	JUMP(:label28)

:label18
# Stack: [@0x27A :label18 @0x33]
0x1D9	PUSH(MLOAD(0x40))
0x1DA	DUP1
0x1DB	DUP3
0x1DC	DUP2
0x1DD	MSTORE(POP(@0x1D9), POP(@0x27A))
0x1E0	PUSH(0x20 + POP(@0x1D9))
0x1E1	SWAP2
0x1E2	POP()
0x1E3	POP()
0x1E6	PUSH(MLOAD(0x40))
0x1E7	DUP1
0x1E8	SWAP2
0x1E9	PUSH(POP(@0x1E0) - POP(@0x1E6))
0x1EA	SWAP1
0x1EB	RETURN(POP(@0x1E6), POP(@0x1E9))

:label19
# Stack: [@0x33]
0x1F2	JUMPI(:label20, !CALLVALUE())

# Stack: [@0x33]
0x1F3	INVALID()

:label20
# Stack: [@0x33]
0x1F5	PUSH(:label21)
0x1FB	JUMP(:label29)

:label21
# Stack: [@0x2A0 :label21 @0x33]
0x1FF	PUSH(MLOAD(0x40))
0x200	DUP1
0x201	DUP3
0x22E	DUP1
0x22F	MSTORE(POP(@0x1FF), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & POP(@0x2A0))
0x232	PUSH(0x20 + POP(@0x1FF))
0x233	SWAP2
0x234	POP()
0x235	POP()
0x238	PUSH(MLOAD(0x40))
0x239	DUP1
0x23A	SWAP2
0x23B	PUSH(POP(@0x232) - POP(@0x238))
0x23C	SWAP1
0x23D	RETURN(POP(@0x238), POP(@0x23B))

:label22
# Stack: [@0x94 :label3 :label6]
0x245	DUP1
0x24C	JUMPI(:label23, !!(POP(@0x94) == SLOAD(0x2) * 0x2))

# Stack: [@0x94 :label3 :label6]
0x24D	PUSH(0x0)
0x24F	PUSH(0x0)
0x251	REVERT()

:label23
# Stack: [@0x94 :label3 :label6]
0x254	POP()
0x255	JUMP(POP(:label3))

:label24
# Stack: [:label5 :label6]
0x25C	PUSH(SLOAD(0x0) + 0x1)
0x25D	PUSH(0x0)
0x25F	DUP1
0x260	SWAP1
0x261	SSTORE(POP(0x0), POP(@0x25C))
0x262	POP()

# Stack: [:label5 :label6]
0x264	JUMP(POP(:label5))

:label25
# Stack: [:label9 @0x33]
0x268	PUSH(SLOAD(0x0))
0x269	DUP2
0x26A	JUMP(POP(:label9))

:label26
# Stack: [:label12 @0x33]
0x26E	PUSH(SLOAD(0x4))
0x26F	DUP2
0x270	JUMP(POP(:label12))

:label27
# Stack: [:label15 @0x33]
0x274	PUSH(SLOAD(0x3))
0x275	DUP2
0x276	JUMP(POP(:label15))

:label28
# Stack: [:label18 @0x33]
0x27A	PUSH(SLOAD(0x2))
0x27B	DUP2
0x27C	JUMP(POP(:label18))

:label29
# Stack: [:label21 @0x33]
0x27E	PUSH(0x1)
0x280	PUSH(0x0)
0x282	SWAP1
0x283	PUSH(SLOAD(POP(0x1)))
0x284	SWAP1
0x288	PUSH(0x100 ** POP(0x0))
0x289	SWAP1
0x2A0	PUSH(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & POP(@0x283) / POP(@0x288))
0x2A1	DUP2
0x2A2	JUMP(POP(:label21))


