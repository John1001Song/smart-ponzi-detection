# Stack: []
0x4	MSTORE(0x40, 0x60)
0xA	JUMPI(:label0, !CALLDATASIZE())

# Stack: []
0x13	PUSH(CALLDATALOAD(0x0) / 0x2 ** 0xE0)
0x19	DUP1
0x1E	JUMPI(:label1, POP(@0x13) == 0x72EA4B8C)

:label0
# Stack: []
0x20	PUSH(:label2)
0x23	PUSH(CALLVALUE())
0x24	PUSH(0x0)
0x26	DUP1
0x27	DUP1
0x31	DUP4
0x36	JUMPI(:label6, POP(@0x23) < 0xDE0B6B3A7640000)

# Stack: [0x0 0x0 0x0 @0x23 :label2]
0x37	PUSH(0x1)
0x39	DUP1
0x3B	DUP1
0x3C	PUSH(POP(0x1) + SLOAD(POP(0x1)))
0x3D	SWAP1
0x3E	DUP2
0x3F	SWAP1
0x40	SSTORE(POP(0x1), POP(@0x3C))
0x41	PUSH(0x3)
0x43	DUP1
0x44	PUSH(SLOAD(POP(0x3)))
0x45	PUSH(CALLER())
0x46	SWAP2
0x47	SWAP1
0x48	DUP2
0x4E	JUMPI(0x2, !(POP(@0x3C) < POP(@0x44)))

# Stack: [@0x3C 0x3 @0x45 0x0 0x0 0x0 @0x23 :label2]
0x4F	SWAP1
0x52	MSTORE(0x0, POP(0x3))
0x57	PUSH(SHA3(0x0, 0x20))
0x58	SWAP1
0x59	PUSH(POP(@0x3C) + POP(@0x57))
0x5F	PUSH(0x100 ** 0x0)
0x60	DUP2
0x62	DUP1
0x6D	PUSH(~((0x2 ** 0xA0 - 0x1) * POP(@0x5F)) & SLOAD(POP(@0x59)))
0x6E	SWAP1
0x6F	DUP4
0x71	PUSH(POP(@0x45) * POP(@0x5F) | POP(@0x6D))
0x72	SWAP1
0x73	SSTORE(POP(@0x59), POP(@0x71))
0x74	POP()
0x7E	DUP4
0x7F	PUSH(POP(@0x23) - 0xDE0B6B3A7640000)
0x80	SWAP4
0x81	POP()
0x82	DUP4
0x83	POP()
0x84	PUSH(0xDE0B6B3A7640000)
0x8D	PUSH(0x0)
0x8F	PUSH(0x0)
0x91	DUP3
0x92	DUP3
0x93	DUP3
0x94	POP()
0x96	PUSH(SLOAD(POP(0x0)) + POP(0xDE0B6B3A7640000))
0x97	SWAP3
0x98	POP()
0x99	POP()
0x9A	DUP2
0x9B	SWAP1
0x9C	SSTORE(POP(0x0), POP(@0x96))
0x9D	POP()
0xA4	POP(0x0)
0xAC	JUMPI(:label3, !!(SLOAD(0x1) > 0x2))

# Stack: [0x0 0x0 0x0 @0x7F :label2]
0xAD	PUSH(0x3)
0xAF	DUP1
0xB0	PUSH(SLOAD(POP(0x3)))
0xB1	DUP2
0xB2	SWAP1
0xB3	DUP2
0xB9	JUMPI(0x2, !(POP(0x0) < POP(@0xB0)))

# Stack: [0x0 0x3 0x0 0x0 0x0 @0x7F :label2]
0xBA	SWAP1
0xBD	MSTORE(0x0, POP(0x3))
0xC2	PUSH(SHA3(0x0, 0x20))
0xC3	SWAP1
0xC4	PUSH(POP(0x0) + POP(@0xC2))
0xC5	PUSH(0x0)
0xC7	SWAP1
0xC8	PUSH(SLOAD(POP(@0xC4)))
0xC9	SWAP1
0xCD	PUSH(0x100 ** POP(0x0))
0xCE	SWAP1
0xE1	PUSH(0x2 ** 0xA0 - 0x1 & 0x2 ** 0xA0 - 0x1 & POP(@0xC8) / POP(@0xCD))
0xE2	PUSH(0x0)
0xE8	POP(0x0)
0xE9	PUSH(SLOAD(0x0))
0xEC	PUSH(MLOAD(0x40))
0xED	DUP1
0xEE	SWAP1
0xEF	POP()
0xF4	PUSH(MLOAD(0x40))
0xF5	DUP1
0xF6	DUP3
0xF8	DUP1
0xF9	DUP4
0xFA	DUP7
0xFB	DUP7
0xFC	PUSH(CALL(POP(0x0), POP(@0xE1), POP(@0xE9), POP(@0xF4), POP(@0xEC) - POP(@0xF4), POP(@0xF4), 0x0))
0xFD	POP()
0xFE	POP()
0xFF	POP()
0x100	DUP1
0x101	SSTORE(POP(0x0), POP(0x0))
0x102	POP()
0x107	SSTORE(0x2, 0x1)
0x10B	JUMP(:label6)

:label1
# Stack: [@0x13]
0x10D	PUSH(0x1)
0x10F	DUP1
0x111	PUSH(SLOAD(POP(0x1)) + POP(0x1))
0x112	PUSH(0x60)
0x114	SWAP1
0x115	DUP2
0x116	MSTORE(POP(0x60), POP(@0x111))
0x117	PUSH(0x20)
0x119	SWAP1
0x11A	RETURN(POP(0x60), POP(0x20))

:label2
# Stack: []
0x11C	STOP()

:label3
# Stack: [0x0 0x0 0x0 @0x7F :label2]
0x11E	PUSH(0x1)
0x120	DUP1
0x124	PUSH(SLOAD(0x3))
0x125	SWAP1
0x12C	JUMPI(:label6, !(POP(0x1) + SLOAD(POP(0x1)) == POP(@0x124)))

# Stack: [0x0 0x0 0x0 @0x7F :label2]
0x12D	PUSH(0x3)
0x12F	DUP1
0x130	PUSH(SLOAD(POP(0x3)))
0x136	PUSH(0x1 + SLOAD(0x2))
0x137	SWAP1
0x138	SWAP2
0x139	PUSH(POP(0x3) * POP(@0x136))
0x13A	SWAP1
0x13B	PUSH(POP(@0x130) - POP(@0x139))
0x13C	SWAP3
0x13D	POP()

:label4
# Stack: [0x0 0x0 [@0x13B | @0x1C1] @0x7F :label2]
0x141	PUSH(SLOAD(0x3))
0x144	PUSH(SLOAD(0x2))
0x145	SWAP1
0x14B	DUP3
0x151	JUMPI(:label7, !(POP() < ~0x1 + POP(@0x141) - POP(@0x144)))

# Stack: [0x0 0x0 [@0x13B | @0x1C1] @0x7F :label2]
0x152	PUSH(0x3)
0x154	DUP1
0x155	PUSH(SLOAD(POP(0x3)))
0x156	DUP4
0x157	SWAP1
0x158	DUP2
0x15E	JUMPI(0x2, !(POP() < POP(@0x155)))

# Stack: [[@0x13B | @0x1C1] 0x3 0x0 0x0 [@0x13B | @0x1C1] @0x7F :label2]
0x15F	SWAP1
0x160	DUP3
0x161	MSTORE(POP(0x0), POP(0x3))
0x164	PUSH(MLOAD(0x40))
0x165	PUSH(0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B)
0x186	SWAP2
0x187	SWAP1
0x188	SWAP2
0x193	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(POP(0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B) + POP()))
0x194	SWAP1
0x195	DUP3
0x196	SWAP1
0x197	PUSH(0x6F05B59D3B20000)
0x1A0	SWAP1
0x1A1	DUP3
0x1A2	DUP2
0x1A3	DUP2
0x1A4	DUP2
0x1A5	DUP6
0x1A6	DUP9
0x1A7	DUP4
0x1A8	PUSH(CALL(POP(0x0), POP(@0x193), POP(0x6F05B59D3B20000), POP(@0x164), POP(0x0), POP(@0x164), POP(0x0)))
0x1A9	POP()
0x1AA	POP()
0x1AB	SWAP1
0x1B8	DUP3
0x1B9	SSTORE(POP(0x0), ~0x6F05B59D3B1FFFF + SLOAD(POP(0x0)))
0x1BA	POP()
0x1BB	POP()
0x1BC	PUSH(0x1)
0x1BE	SWAP3
0x1BF	SWAP1
0x1C0	SWAP3
0x1C1	PUSH(POP(0x1) + POP())
0x1C2	SWAP2
0x1C6	JUMP(:label4)

:label5
# Stack: [[@0x2E2 | @0x29E] @0x2A5 0x3 @0x2A5 [@0x28D | 0x1] @0x1F8 [@0x294 | 0x0] @0x7F :label2]
0x1C8	POP()
0x1C9	POP()
0x1CA	PUSH(0x2)
0x1CC	DUP1
0x1D0	PUSH(0x1 + SLOAD(POP(0x2)))
0x1D1	SWAP1
0x1D2	SSTORE(POP(0x2), POP(@0x1D0))
0x1D3	POP()
0x1D4	POP()

:label6
# Stack: [[0x1 | 0x0 | @0x28D] [0x0 | @0x1F8] [0x0 | @0x294] [@0x7F | @0x23] :label2]
0x1D6	PUSH(0x0)
0x1D8	DUP1
0x1DA	DUP5
0x1DB	PUSH(POP() + SLOAD(POP(0x0)))
0x1DC	SWAP1
0x1DD	SSTORE(POP(0x0), POP(@0x1DB))
0x1DE	POP()
0x1DF	POP()
0x1E0	POP()
0x1E1	POP()
0x1E2	JUMP(POP(:label2))

:label7
# Stack: [0x0 0x0 [@0x1C1 | @0x13B] @0x7F :label2]
0x1E4	POP()
0x1E7	PUSH(SLOAD(0x2))
0x1E8	DUP1
0x1E9	PUSH(SLOAD(POP(0x0)))
0x1EA	SWAP1
0x1EB	SWAP2
0x1EC	POP()
0x1ED	PUSH(0x1)
0x1EF	SWAP1
0x1F0	DUP2
0x1F1	PUSH(POP(0x1) + POP(@0x1E7))
0x1F2	SWAP1
0x1F3	SWAP2
0x1F8	PUSH(~0x0 + POP(@0x1E9) / POP(@0x1F1))
0x1F9	SWAP1

:label8
# Stack: [[0x1 | @0x28D] @0x1F8 [0x0 | @0x294] @0x7F :label2]
0x1FD	PUSH(SLOAD(0x3))
0x200	PUSH(SLOAD(0x2))
0x201	SWAP1
0x207	DUP3
0x20D	JUMPI(:label10, !(POP() < ~0x1 + POP(@0x1FD) - POP(@0x200)))

# Stack: [[0x1 | @0x28D] @0x1F8 [@0x294 | 0x0] @0x7F :label2]
0x20E	PUSH(0x3)
0x210	DUP1
0x211	PUSH(SLOAD(POP(0x3)))
0x212	DUP4
0x213	SWAP1
0x214	DUP2
0x21A	JUMPI(0x2, !(POP() < POP(@0x211)))

# Stack: [[0x0 | @0x294] 0x3 [0x1 | @0x28D] @0x1F8 [0x0 | @0x294] @0x7F :label2]
0x21B	PUSH(0x0)
0x21D	SWAP2
0x21E	DUP3
0x21F	MSTORE(POP(0x0), POP(0x3))
0x222	PUSH(MLOAD(0x40))
0x223	PUSH(0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B)
0x244	SWAP2
0x245	SWAP1
0x246	SWAP2
0x251	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(POP(0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B) + POP()))
0x252	SWAP2
0x253	SWAP1
0x254	DUP4
0x255	DUP6
0x25A	PUSH(~0x0 + POP(@0x1F8) / POP())
0x25B	SWAP1
0x25C	DUP3
0x25D	DUP2
0x25E	DUP2
0x25F	DUP2
0x260	DUP6
0x261	DUP9
0x262	DUP4
0x263	PUSH(CALL(POP(0x0), POP(@0x251), POP(@0x25A), POP(@0x222), POP(0x0), POP(@0x222), POP(0x0)))
0x264	POP()
0x265	POP()
0x266	DUP2
0x267	PUSH(SLOAD(POP(0x0)))
0x268	DUP4
0x269	DUP6
0x26A	PUSH(POP(@0x1F8) / POP())
0x26B	SWAP1
0x26C	PUSH(POP(@0x267) - POP(@0x26A))
0x26D	PUSH(0x1)
0x26F	SWAP1
0x270	DUP2
0x271	PUSH(POP(0x1) + POP(@0x26C))
0x272	SWAP1
0x273	SWAP3
0x274	SSTORE(POP(0x0), POP(@0x271))
0x275	POP()
0x276	PUSH(0x2)
0x278	SWAP1
0x279	DUP4
0x27B	DUP3
0x282	DUP4
0x284	PUSH(!(POP() == ~0x0 + POP() * (POP() + POP(0x1)) / POP(0x2)))
0x285	SWAP1
0x286	POP()
0x28A	JUMPI(:label9, POP(@0x284))

# Stack: [[0x1 | @0x28D] @0x1F8 [0x0 | @0x294] @0x7F :label2]
0x28D	PUSH(0x1 + POP())

:label9
# Stack: [[@0x28D | 0x1] @0x1F8 [0x0 | @0x294] @0x7F :label2]
0x28F	PUSH(0x1)
0x291	SWAP3
0x292	SWAP1
0x293	SWAP3
0x294	PUSH(POP(0x1) + POP())
0x295	SWAP2
0x299	JUMP(:label8)

:label10
# Stack: [[@0x28D | 0x1] @0x1F8 [@0x294 | 0x0] @0x7F :label2]
0x29B	PUSH(0x3)
0x29D	DUP1
0x29E	PUSH(SLOAD(POP(0x3)))
0x2A2	DUP1
0x2A4	DUP2
0x2A5	PUSH(POP(0x3) + POP(@0x29E) + SLOAD(0x2))
0x2A6	DUP1
0x2A7	DUP4
0x2A8	SSTORE(POP(0x3), POP(@0x2A5))
0x2A9	SWAP2
0x2AA	SWAP1
0x2AB	DUP3
0x2AC	SWAP1
0x2AD	DUP1
0x2AE	PUSH(!POP(@0x29E))
0x2AF	DUP2
0x2B0	SWAP1
0x2B5	JUMPI(:label5, POP(@0x2AE) > POP(@0x2A5))

# Stack: [@0x29E @0x2A5 0x3 @0x2A5 [@0x28D | 0x1] @0x1F8 [@0x294 | 0x0] @0x7F :label2]
0x2B6	PUSH(0x0)
0x2B8	DUP3
0x2B9	SWAP1
0x2BA	MSTORE(POP(0x0), POP(0x3))
0x2BB	PUSH(:label5)
0x2BE	SWAP1
0x2BF	PUSH(0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B)
0x2E0	SWAP1
0x2E1	DUP2
0x2E2	PUSH(POP(0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B) + POP(@0x29E))
0x2E3	SWAP1
0x2E4	DUP4
0x2E5	PUSH(POP(@0x2A5) + POP(0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B))

:label11
# Stack: [[@0x2E5 | @0x2F5] @0x2E2 :label5 @0x2A5 0x3 @0x2A5 [@0x28D | 0x1] @0x1F8 [@0x294 | 0x0] @0x7F :label2]
0x2E7	DUP1
0x2E8	DUP3
0x2EE	JUMPI(:label12, !(POP(@0x2E2) > POP()))

# Stack: [[@0x2E5 | @0x2F5] @0x2E2 :label5 @0x2A5 0x3 @0x2A5 [@0x28D | 0x1] @0x1F8 [0x0 | @0x294] @0x7F :label2]
0x2F1	DUP1
0x2F2	SSTORE(POP(), 0x0)
0x2F5	PUSH(0x1 + POP())
0x2F9	JUMP(:label11)

:label12
# Stack: [[@0x2F5 | @0x2E5] @0x2E2 :label5 @0x2A5 0x3 @0x2A5 [@0x28D | 0x1] @0x1F8 [@0x294 | 0x0] @0x7F :label2]
0x2FB	POP()
0x2FC	SWAP1
0x2FD	JUMP(POP(:label5))


