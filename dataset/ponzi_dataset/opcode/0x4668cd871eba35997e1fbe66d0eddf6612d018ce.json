# Stack: []
0x4	MSTORE(0x40, 0x60)
0xA	JUMPI(:label0, !CALLDATASIZE())

# Stack: []
0x13	PUSH(CALLDATALOAD(0x0) / 0x2 ** 0xE0)
0x19	DUP1
0x1E	JUMPI(:label1, POP(@0x13) == 0x13AF4035)

# Stack: [@0x13]
0x1F	DUP1
0x29	JUMPI(:label3, 0x8DA5CB5B == POP(@0x13))

# Stack: [@0x13]
0x2A	DUP1
0x34	JUMPI(:label4, 0x9003ADFE == POP(@0x13))

# Stack: [@0x13]
0x35	DUP1
0x3F	JUMPI(:label5, 0xA2F9EAC6 == POP(@0x13))

# Stack: [@0x13]
0x40	DUP1
0x4A	JUMPI(:label6, 0xA60F3588 == POP(@0x13))

# Stack: [@0x13]
0x4B	DUP1
0x55	JUMPI(:label7, 0xB69EF8A8 == POP(@0x13))

# Stack: [@0x13]
0x56	DUP1
0x60	JUMPI(:label8, 0xE97DCB62 == POP(@0x13))

:label0
# Stack: []
0x62	PUSH(:label11)
0x65	PUSH(:label12)
0x6B	JUMP(:label9)

:label1
# Stack: [@0x13]
0x6D	PUSH(:label11)
0x72	PUSH(CALLDATALOAD(0x4))
0x75	PUSH(SLOAD(0x4))
0x7D	PUSH(0x2 ** 0xA0 - 0x1)
0x7E	SWAP1
0x7F	DUP2
0x80	PUSH(POP(@0x7D) & POP(@0x75))
0x81	PUSH(CALLER())
0x82	SWAP1
0x83	SWAP1
0x84	SWAP2
0x8B	JUMPI(:label2, !(POP(@0x81) & POP(@0x7D) == POP(@0x80)))

# Stack: [@0x72 :label11 @0x13]
0x8C	PUSH(0x4)
0x8E	DUP1
0x9A	DUP2
0x9B	PUSH(POP(@0x72) | ~(0x2 ** 0xA0 - 0x1) & SLOAD(POP(0x4)))
0x9C	SWAP1
0x9D	SSTORE(POP(0x4), POP(@0x9B))

:label2
# Stack: [@0x72 :label11 @0x13]
0x9F	POP()
0xA0	JUMP(POP(:label11))

:label3
# Stack: [@0x13]
0xA2	PUSH(:label13)
0xB0	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(0x4))
0xB1	DUP2
0xB2	JUMP(POP(:label13))

:label4
# Stack: [@0x13]
0xB4	PUSH(:label14)
0xB9	PUSH(SLOAD(0x2))
0xBA	DUP2
0xBB	JUMP(POP(:label14))

:label5
# Stack: [@0x13]
0xBD	PUSH(:label15)
0xC2	PUSH(CALLDATALOAD(0x4))
0xC3	PUSH(0x0)
0xC5	DUP1
0xC6	PUSH(SLOAD(POP(0x0)))
0xC7	DUP2
0xC8	SWAP1
0xC9	DUP2
0xCF	JUMPI(0x2, !(POP(@0xC2) < POP(@0xC6)))

# Stack: [@0xC2 0x0 @0xC2 :label15 @0x13]
0xD0	POP()
0xD1	DUP1
0xD2	MSTORE(POP(0x0), POP(0x0))
0xD5	PUSH(0x2 * POP(@0xC2))
0xF7	DUP1
0xF9	PUSH(SLOAD(POP(@0xD5) + 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563))
0xFA	PUSH(0x0)
0xFC	DUP1
0x103	DUP1
0x104	CODECOPY(POP(0x0), 0x417, 0x20)
0x105	DUP1
0x106	PUSH(MLOAD(POP(0x0)))
0x107	SWAP1
0x108	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x109	SWAP1
0x10A	SWAP1
0x10B	SWAP2
0x10D	PUSH(SLOAD(POP(@0x106) + POP(@0xD5)))
0x115	PUSH(0x2 ** 0xA0 - 0x1)
0x116	SWAP2
0x117	SWAP1
0x118	SWAP2
0x119	PUSH(POP(@0x115) & POP(@0xF9))
0x11A	SWAP1
0x11B	DUP3
0x11C	JUMP(POP(:label15))

:label6
# Stack: [@0x13]
0x11E	PUSH(:label14)
0x123	PUSH(SLOAD(0x1))
0x124	DUP2
0x125	JUMP(POP(:label14))

:label7
# Stack: [@0x13]
0x127	PUSH(:label14)
0x12C	PUSH(SLOAD(0x3))
0x12D	DUP2
0x12E	JUMP(POP(:label14))

:label8
# Stack: [@0x13]
0x130	PUSH(:label11)

:label9
# Stack: [[:label11 | :label12] [:label11 | @0x13]]
0x134	PUSH(0x0)
0x136	PUSH(0x0)
0x138	PUSH(0x0)
0x149	JUMPI(:label16, !(CALLVALUE() < 0xDE0B6B3A7640000))

# Stack: [0x0 0x0 0x0 [:label12 | :label11] [:label11 | @0x13]]
0x14C	PUSH(MLOAD(0x40))
0x156	PUSH(CALLER() & 0x2 ** 0xA0 - 0x1)
0x157	SWAP1
0x158	DUP3
0x159	SWAP1
0x15A	PUSH(CALLVALUE())
0x15B	SWAP1
0x15C	DUP3
0x15D	DUP2
0x15E	DUP2
0x15F	DUP2
0x160	DUP6
0x161	DUP9
0x162	DUP4
0x163	PUSH(CALL(POP(0x0), POP(@0x156), POP(@0x15A), POP(@0x14C), POP(0x0), POP(@0x14C), POP(0x0)))
0x164	POP()
0x165	POP()
0x166	POP()
0x167	POP()
0x168	POP()

:label10
# Stack: [[0x0 | @0x3AF] [0x0 | @0x21B] [0x0 | 0xDE0B6B3A7640000 | @0x214] [:label11 | :label12] [@0x13 | :label11]]
0x16A	POP()
0x16B	POP()
0x16C	POP()
0x16D	JUMP(POP())

:label11
# Stack: []
0x16F	STOP()

:label12
# Stack: [:label11]
0x171	JUMP(POP(:label11))

:label13
# Stack: [@0xB0 :label13 @0x13]
0x173	PUSH(0x40)
0x175	DUP1
0x176	PUSH(MLOAD(POP(0x40)))
0x17E	PUSH(0x2 ** 0xA0 - 0x1)
0x17F	SWAP3
0x180	SWAP1
0x181	SWAP3
0x183	DUP2
0x184	MSTORE(POP(@0x176), POP(@0x17E) & POP(@0xB0))
0x185	PUSH(MLOAD(POP(0x40)))
0x186	SWAP1
0x187	DUP2
0x188	SWAP1
0x18C	PUSH(0x20 + POP(@0x176) - POP(@0x185))
0x18D	SWAP1
0x18E	RETURN(POP(@0x185), POP(@0x18C))

:label14
# Stack: [[@0x123 | @0xB9 | @0x12C] [:label14 | :label14 | :label14] @0x13]
0x190	PUSH(0x40)
0x192	DUP1
0x193	PUSH(MLOAD(POP(0x40)))
0x194	SWAP2
0x195	DUP3
0x196	MSTORE(POP(@0x193), POP())
0x197	PUSH(MLOAD(POP(0x40)))
0x198	SWAP1
0x199	DUP2
0x19A	SWAP1
0x19E	PUSH(0x20 + POP(@0x193) - POP(@0x197))
0x19F	SWAP1
0x1A0	RETURN(POP(@0x197), POP(@0x19E))

:label15
# Stack: [@0x10D @0x119 :label15 @0x13]
0x1A4	PUSH(MLOAD(0x40))
0x1A5	DUP1
0x1A6	DUP4
0x1B0	DUP1
0x1B1	MSTORE(POP(@0x1A4), 0x2 ** 0xA0 - 0x1 & POP(@0x119))
0x1B4	PUSH(0x20 + POP(@0x1A4))
0x1B5	DUP3
0x1B6	DUP2
0x1B7	MSTORE(POP(@0x1B4), POP(@0x10D))
0x1BA	PUSH(0x20 + POP(@0x1B4))
0x1BB	SWAP3
0x1BC	POP()
0x1BD	POP()
0x1BE	POP()
0x1C1	PUSH(MLOAD(0x40))
0x1C2	DUP1
0x1C3	SWAP2
0x1C4	PUSH(POP(@0x1BA) - POP(@0x1C1))
0x1C5	SWAP1
0x1C6	RETURN(POP(@0x1C1), POP(@0x1C4))

:label16
# Stack: [0x0 0x0 0x0 [:label12 | :label11] [:label11 | @0x13]]
0x1D7	JUMPI(:label17, !(CALLVALUE() > 0xDE0B6B3A7640000))

# Stack: [0x0 0x0 0x0 [:label12 | :label11] [@0x13 | :label11]]
0x1DA	PUSH(MLOAD(0x40))
0x1E4	PUSH(CALLER() & 0x2 ** 0xA0 - 0x1)
0x1E5	SWAP1
0x1E6	PUSH(0x0)
0x1E8	SWAP1
0x1F4	PUSH(CALLVALUE() + ~0xDE0B6B3A763FFFF)
0x1F5	SWAP1
0x1F6	DUP3
0x1F7	DUP2
0x1F8	DUP2
0x1F9	DUP2
0x1FA	DUP6
0x1FB	DUP9
0x1FC	DUP4
0x1FD	PUSH(CALL(POP(0x0), POP(@0x1E4), POP(@0x1F4), POP(@0x1DA), POP(0x0), POP(@0x1DA), POP(0x0)))
0x1FE	POP()
0x1FF	PUSH(0xDE0B6B3A7640000)
0x208	SWAP7
0x209	POP()
0x20A	PUSH(:label18)
0x20D	SWAP4
0x20E	POP()
0x20F	POP()
0x210	POP()
0x211	POP()
0x212	JUMP(POP(:label18))

:label17
# Stack: [0x0 0x0 0x0 [:label12 | :label11] [:label11 | @0x13]]
0x214	PUSH(CALLVALUE())
0x215	SWAP3
0x216	POP()

:label18
# Stack: [0x0 0x0 [0xDE0B6B3A7640000 | @0x214] [:label12 | :label11] [:label11 | @0x13]]
0x218	PUSH(0x0)
0x21A	DUP1
0x21B	PUSH(SLOAD(POP(0x0)))
0x21E	DUP1
0x21F	PUSH(POP(@0x21B) + 0x1)
0x220	DUP1
0x221	DUP4
0x222	SSTORE(POP(0x0), POP(@0x21F))
0x223	SWAP1
0x224	SWAP4
0x225	POP()
0x226	SWAP1
0x227	DUP2
0x228	DUP5
0x229	DUP1
0x22A	PUSH(!POP(@0x21B))
0x22B	DUP2
0x22C	SWAP1
0x231	JUMPI(:label20, POP(@0x22A) > POP(@0x21F))

# Stack: [@0x21B @0x21F 0x0 @0x21F 0x0 @0x21B [0xDE0B6B3A7640000 | @0x214] [:label12 | :label11] [:label11 | @0x13]]
0x234	PUSH(0x2 * POP(@0x21B))
0x235	DUP1
0x239	DUP2
0x23C	MSTORE(0x0, POP(0x0))
0x241	PUSH(SHA3(0x0, 0x20))
0x242	SWAP1
0x243	DUP2
0x244	PUSH(POP(@0x241) + POP(@0x234))
0x245	SWAP1
0x246	PUSH(POP(@0x241) + 0x2 * POP(@0x21F))
0x247	PUSH(:label20)
0x24A	SWAP2
0x24B	SWAP1

:label19
# Stack: [[@0x246 | @0x26A] @0x244 :label20 @0x21F 0x0 @0x21F 0x0 @0x21B [0xDE0B6B3A7640000 | @0x214] [:label12 | :label11] [:label11 | @0x13]]
0x24D	DUP1
0x24E	DUP3
0x254	JUMPI(:label21, !(POP(@0x244) > POP()))

# Stack: [[@0x246 | @0x26A] @0x244 :label20 @0x21F 0x0 @0x21F 0x0 @0x21B [0xDE0B6B3A7640000 | @0x214] [:label12 | :label11] [:label11 | @0x13]]
0x255	DUP1
0x261	DUP1
0x262	SSTORE(POP(), ~(0x2 ** 0xA0 - 0x1) & SLOAD(POP()))
0x263	PUSH(0x0)
0x265	PUSH(0x1)
0x267	SWAP1
0x268	SWAP1
0x269	SWAP2
0x26A	PUSH(POP(0x1) + POP())
0x26B	SWAP1
0x26C	DUP2
0x26D	SSTORE(POP(@0x26A), POP(0x0))
0x271	JUMP(:label19)

:label20
# Stack: [[@0x244 | @0x21B] @0x21F 0x0 @0x21F 0x0 @0x21B [0xDE0B6B3A7640000 | @0x214] [:label12 | :label11] [:label11 | @0x13]]
0x273	POP()
0x274	POP()
0x275	POP()
0x276	POP()
0x277	PUSH(CALLER())
0x278	PUSH(0x0)
0x27C	POP(0x0)
0x27D	DUP4
0x27E	DUP2
0x280	DUP1
0x286	JUMPI(0x2, !(POP(@0x21B) < SLOAD(POP(0x0))))

# Stack: [@0x21B 0x0 @0x277 0x0 @0x21B [0xDE0B6B3A7640000 | @0x214] [:label12 | :label11] [:label11 | @0x13]]
0x287	DUP2
0x288	DUP1
0x289	MSTORE(POP(0x0), POP(0x0))
0x2AE	PUSH(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 + 0x2 * POP(@0x21B))
0x2AF	DUP1
0x2BA	PUSH(~(0x2 ** 0xA0 - 0x1) & SLOAD(POP(@0x2AE)))
0x2BB	SWAP1
0x2BC	SWAP3
0x2BD	PUSH(POP(@0x277) | POP(@0x2BA))
0x2BE	SWAP1
0x2BF	SWAP2
0x2C0	SSTORE(POP(@0x2AE), POP(@0x2BD))
0x2C1	DUP1
0x2C2	PUSH(SLOAD(POP(0x0)))
0x2C3	DUP4
0x2C4	SWAP1
0x2C5	SWAP1
0x2C6	DUP5
0x2C7	SWAP1
0x2C8	DUP2
0x2CE	JUMPI(0x2, !(POP(@0x21B) < POP(@0x2C2)))

# Stack: [@0x21B 0x0 [0xDE0B6B3A7640000 | @0x214] 0x0 @0x21B [0xDE0B6B3A7640000 | @0x214] [:label12 | :label11] [:label11 | @0x13]]
0x2D2	PUSH(0x0)
0x2D4	DUP1
0x2DB	DUP1
0x2DC	CODECOPY(POP(0x0), 0x417, 0x20)
0x2DD	DUP1
0x2DE	PUSH(MLOAD(POP(0x0)))
0x2DF	SWAP1
0x2E0	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x2E1	PUSH(POP(@0x2DE) + 0x2 * POP(@0x21B))
0x2E2	SWAP2
0x2E3	SWAP1
0x2E4	SWAP2
0x2E5	SSTORE(POP(@0x2E1), POP())
0x2E6	DUP3
0x2EB	JUMPI(:label22, POP(@0x21B) == POP(0x0))

# Stack: [0x0 @0x21B [0xDE0B6B3A7640000 | @0x214] [:label12 | :label11] [:label11 | @0x13]]
0x2EC	PUSH(0x2)
0x2EE	DUP1
0x2F2	DUP4
0x2F4	PUSH(POP() / 0xA + SLOAD(POP(0x2)))
0x2F5	SWAP1
0x2F6	DUP2
0x2F7	SWAP1
0x2F8	SSTORE(POP(0x2), POP(@0x2F4))
0x2FB	PUSH(SLOAD(0x4))
0x2FE	PUSH(MLOAD(0x40))
0x306	PUSH(0x2 ** 0xA0 - 0x1)
0x307	SWAP1
0x308	SWAP1
0x309	SWAP2
0x30A	PUSH(POP(@0x306) & POP(@0x2FB))
0x30B	SWAP2
0x30C	PUSH(0x0)
0x30E	SWAP2
0x30F	DUP3
0x310	DUP2
0x311	DUP2
0x312	DUP2
0x313	DUP6
0x314	DUP9
0x315	DUP4
0x316	PUSH(CALL(POP(0x0), POP(@0x30A), POP(@0x2F4), POP(@0x2FE), POP(0x0), POP(@0x2FE), POP(0x0)))
0x317	POP()
0x318	POP()
0x319	POP()
0x31C	SSTORE(0x2, POP(0x0))
0x31D	POP()
0x31E	PUSH(0x3)
0x320	DUP1
0x324	DUP4
0x326	DUP4
0x328	PUSH(POP() - POP() / 0xA + SLOAD(POP(0x3)))
0x329	SWAP1
0x32A	SSTORE(POP(0x3), POP(@0x328))
0x32E	JUMP(:label23)

:label21
# Stack: [[@0x26A | @0x246] @0x244 :label20 @0x21F 0x0 @0x21F 0x0 @0x21B [@0x214 | 0xDE0B6B3A7640000] [:label12 | :label11] [:label11 | @0x13]]
0x330	POP()
0x331	SWAP1
0x332	JUMP(POP(:label20))

:label22
# Stack: [0x0 @0x21B [0xDE0B6B3A7640000 | @0x214] [:label12 | :label11] [:label11 | @0x13]]
0x334	PUSH(0x3)
0x336	DUP1
0x338	DUP4
0x339	PUSH(POP() + SLOAD(POP(0x3)))
0x33A	SWAP1
0x33B	SSTORE(POP(0x3), POP(@0x339))

:label23
# Stack: [[0x0 | @0x3AF] @0x21B [0xDE0B6B3A7640000 | @0x214] [:label12 | :label11] [:label11 | @0x13]]
0x340	PUSH(SLOAD(0x1))
0x341	PUSH(0x0)
0x343	DUP1
0x344	PUSH(SLOAD(POP(0x0)))
0x345	PUSH(0x64)
0x347	SWAP2
0x348	SWAP1
0x349	DUP2
0x34F	JUMPI(0x2, !(POP(@0x340) < POP(@0x344)))

# Stack: [@0x340 0x0 0x64 [0x0 | @0x3AF] @0x21B [0xDE0B6B3A7640000 | @0x214] [:label12 | :label11] [:label11 | @0x13]]
0x350	SWAP1
0x351	DUP1
0x352	MSTORE(POP(0x0), POP(0x0))
0x355	PUSH(SLOAD(0x3))
0x356	PUSH(0x2)
0x358	SWAP1
0x359	SWAP1
0x35A	SWAP2
0x35C	PUSH(0x0)
0x35E	DUP1
0x365	DUP1
0x366	CODECOPY(POP(0x0), 0x417, 0x20)
0x367	DUP1
0x368	PUSH(MLOAD(POP(0x0)))
0x369	SWAP1
0x36A	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x36C	PUSH(SLOAD(POP(@0x368) + POP(0x2) * POP(@0x340)))
0x36D	SWAP2
0x36E	SWAP1
0x36F	SWAP2
0x373	PUSH(0x96 * POP(@0x36C) / POP(0x64))
0x374	SWAP1
0x37A	JUMPI(:label10, !(POP(@0x355) > POP(@0x373)))

# Stack: [[@0x3AF | 0x0] @0x21B [0xDE0B6B3A7640000 | @0x214] [:label12 | :label11] [:label11 | @0x13]]
0x37D	PUSH(SLOAD(0x1))
0x37E	PUSH(0x0)
0x380	DUP1
0x381	PUSH(SLOAD(POP(0x0)))
0x382	PUSH(0x64)
0x384	SWAP2
0x385	SWAP1
0x386	DUP2
0x38C	JUMPI(0x2, !(POP(@0x37D) < POP(@0x381)))

# Stack: [@0x37D 0x0 0x64 [0x0 | @0x3AF] @0x21B [@0x214 | 0xDE0B6B3A7640000] [:label12 | :label11] [:label11 | @0x13]]
0x38F	PUSH(SLOAD(0x1))
0x390	DUP3
0x391	PUSH(SLOAD(POP(0x0)))
0x392	PUSH(0x2)
0x394	SWAP2
0x395	SWAP1
0x396	SWAP3
0x398	PUSH(0x0)
0x39A	DUP1
0x3A1	DUP1
0x3A2	CODECOPY(POP(0x0), 0x417, 0x20)
0x3A3	DUP1
0x3A4	PUSH(MLOAD(POP(0x0)))
0x3A5	SWAP1
0x3A6	MSTORE(POP(0x0), MLOAD(POP(0x0)))
0x3A8	PUSH(SLOAD(POP(@0x3A4) + POP(0x2) * POP(@0x37D)))
0x3A9	SWAP4
0x3AA	SWAP1
0x3AB	SWAP4
0x3AF	PUSH(0x96 * POP(@0x3A8) / POP(0x64))
0x3B0	SWAP4
0x3B1	POP()
0x3B2	SWAP1
0x3B3	SWAP2
0x3B4	SWAP1
0x3B5	DUP2
0x3BB	JUMPI(0x2, !(POP(@0x38F) < POP(@0x391)))

# Stack: [@0x38F 0x0 @0x3AF @0x21B [0xDE0B6B3A7640000 | @0x214] [:label12 | :label11] [@0x13 | :label11]]
0x3BE	PUSH(MLOAD(0x40))
0x3BF	PUSH(0x2)
0x3C1	SWAP2
0x3C2	SWAP1
0x3C3	SWAP2
0x3F0	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 + POP(0x2) * POP(@0x38F)))
0x3F1	SWAP2
0x3F2	SWAP1
0x3F3	DUP4
0x3F4	SWAP1
0x3F5	DUP3
0x3F6	DUP2
0x3F7	DUP2
0x3F8	DUP2
0x3F9	DUP6
0x3FA	DUP9
0x3FB	DUP4
0x3FC	PUSH(CALL(POP(0x0), POP(@0x3F0), POP(@0x3AF), POP(@0x3BE), POP(0x0), POP(@0x3BE), POP(0x0)))
0x3FD	POP()
0x3FE	POP()
0x3FF	PUSH(0x3)
0x401	DUP1
0x402	PUSH(SLOAD(POP(0x3)))
0x403	SWAP2
0x404	SWAP1
0x405	SWAP2
0x406	PUSH(POP(@0x402) - POP(@0x3AF))
0x407	SWAP1
0x408	SSTORE(POP(0x3), POP(@0x406))
0x409	POP()
0x40A	POP()
0x40B	PUSH(0x1)
0x40D	DUP1
0x40F	DUP1
0x410	PUSH(POP(0x1) + SLOAD(POP(0x1)))
0x411	SWAP1
0x412	SSTORE(POP(0x1), POP(@0x410))
0x416	JUMP(:label23)


