# Stack: []
0x4	MSTORE(0x40, 0x60)
0xA	JUMPI(:label0, !CALLDATASIZE())

# Stack: []
0x13	PUSH(CALLDATALOAD(0x0) / 0x2 ** 0xE0)
0x19	DUP1
0x1E	JUMPI(:label1, POP(@0x13) == 0x2FB0C5E)

# Stack: [@0x13]
0x1F	DUP1
0x29	JUMPI(:label2, 0x13AF4035 == POP(@0x13))

# Stack: [@0x13]
0x2A	DUP1
0x34	JUMPI(:label3, 0x3D79D1C8 == POP(@0x13))

# Stack: [@0x13]
0x35	DUP1
0x3F	JUMPI(:label5, 0x41C0E1B5 == POP(@0x13))

# Stack: [@0x13]
0x40	DUP1
0x4A	JUMPI(:label7, 0x655F8294 == POP(@0x13))

# Stack: [@0x13]
0x4B	DUP1
0x55	JUMPI(:label8, 0x7873BC61 == POP(@0x13))

# Stack: [@0x13]
0x56	DUP1
0x60	JUMPI(:label9, 0x8DA5CB5B == POP(@0x13))

# Stack: [@0x13]
0x61	DUP1
0x6B	JUMPI(:label10, 0xBFC3D84B == POP(@0x13))

# Stack: [@0x13]
0x6C	DUP1
0x76	JUMPI(:label11, 0xD80E8700 == POP(@0x13))

# Stack: [@0x13]
0x77	DUP1
0x81	JUMPI(:label12, 0xD94073D4 == POP(@0x13))

# Stack: [@0x13]
0x82	DUP1
0x8C	JUMPI(:label13, 0xDAF1AF19 == POP(@0x13))

# Stack: [@0x13]
0x8D	DUP1
0x97	JUMPI(:label14, 0xE97DCB62 == POP(@0x13))

:label0
# Stack: []
0x99	PUSH(:label16)
0x9C	PUSH(:label17)
0xA2	JUMP(:label15)

:label1
# Stack: [@0x13]
0xA4	PUSH(:label4)
0xA9	PUSH(SLOAD(0x3))
0xAA	DUP2
0xAB	JUMP(POP(:label4))

:label2
# Stack: [@0x13]
0xAD	PUSH(:label16)
0xB2	PUSH(CALLDATALOAD(0x4))
0xB5	PUSH(SLOAD(0x5))
0xBD	PUSH(0x2 ** 0xA0 - 0x1)
0xBE	SWAP1
0xBF	DUP2
0xC0	PUSH(POP(@0xBD) & POP(@0xB5))
0xC1	PUSH(CALLER())
0xC2	SWAP1
0xC3	SWAP1
0xC4	SWAP2
0xCB	JUMPI(:label21, !(POP(@0xC1) & POP(@0xBD) == POP(@0xC0)))

# Stack: [@0xB2 :label16 @0x13]
0xCC	PUSH(0x5)
0xCE	DUP1
0xDA	DUP2
0xDB	PUSH(POP(@0xB2) | ~(0x2 ** 0xA0 - 0x1) & SLOAD(POP(0x5)))
0xDC	SWAP1
0xDD	SSTORE(POP(0x5), POP(@0xDB))
0xDE	POP()
0xDF	JUMP(POP(:label16))

:label3
# Stack: [@0x13]
0xE3	PUSH(SLOAD(0x4))

:label4
# Stack: [[@0xE3 | @0xA9 | @0x1BB | @0x1B0 | @0x1AA | @0x19F | @0x142] [:label4 | :label4 | :label4 | @0x13 | :label4]]
0xE5	PUSH(0x40)
0xE7	DUP1
0xE8	PUSH(MLOAD(POP(0x40)))
0xE9	SWAP2
0xEA	DUP3
0xEB	MSTORE(POP(@0xE8), POP())
0xEC	PUSH(MLOAD(POP(0x40)))
0xED	SWAP1
0xEE	DUP2
0xEF	SWAP1
0xF3	PUSH(0x20 + POP(@0xE8) - POP(@0xEC))
0xF4	SWAP1
0xF5	RETURN(POP(@0xEC), POP(@0xF3))

:label5
# Stack: [@0x13]
0xF7	PUSH(:label16)
0xFC	PUSH(SLOAD(0x5))
0x104	PUSH(0x2 ** 0xA0 - 0x1)
0x105	SWAP1
0x106	DUP2
0x107	PUSH(POP(@0x104) & POP(@0xFC))
0x108	PUSH(CALLER())
0x109	SWAP1
0x10A	SWAP1
0x10B	SWAP2
0x10D	PUSH(POP(@0x108) & POP(@0x104) == POP(@0x107))
0x10E	DUP1
0x113	JUMPI(:label6, !POP(@0x10D))

# Stack: [@0x10D :label16 @0x13]
0x114	POP()
0x123	PUSH(!(BALANCE(0x2 ** 0xA0 - 0x1 & ADDRESS()) > 0x5))

:label6
# Stack: [[@0x123 | @0x10D] :label16 @0x13]
0x129	JUMPI(:label17, !POP())

# Stack: [:label16 @0x13]
0x12E	SSTORE(0x3, 0x0)
0x13B	SELFDESTRUCT(0x2 ** 0xA0 - 0x1 & SLOAD(0x5))

:label7
# Stack: [@0x13]
0x13D	PUSH(:label4)
0x142	PUSH(SLOAD(0x1))
0x143	DUP2
0x144	JUMP(POP(:label4))

:label8
# Stack: [@0x13]
0x146	PUSH(:label18)
0x14B	PUSH(CALLDATALOAD(0x4))
0x14C	PUSH(0x0)
0x14E	DUP1
0x14F	PUSH(SLOAD(POP(0x0)))
0x150	DUP2
0x151	SWAP1
0x152	DUP2
0x158	JUMPI(0x2, !(POP(@0x14B) < POP(@0x14F)))

# Stack: [@0x14B 0x0 @0x14B :label18 @0x13]
0x159	POP()
0x15A	DUP1
0x15B	MSTORE(POP(0x0), POP(0x0))
0x187	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 + POP(@0x14B)))
0x188	DUP2
0x189	JUMP(POP(:label18))

:label9
# Stack: [@0x13]
0x18B	PUSH(:label18)
0x199	PUSH(0x2 ** 0xA0 - 0x1 & SLOAD(0x5))
0x19A	DUP2
0x19B	JUMP(POP(:label18))

:label10
# Stack: [@0x13]
0x19F	PUSH(SLOAD(0x2))
0x1A3	JUMP(:label4)

:label11
# Stack: [@0x13]
0x1A5	PUSH(:label4)
0x1AA	PUSH(SLOAD(0x2))
0x1AB	DUP2
0x1AC	JUMP(POP(:label4))

:label12
# Stack: [@0x13]
0x1B0	PUSH(SLOAD(0x1))
0x1B4	JUMP(:label4)

:label13
# Stack: [@0x13]
0x1B6	PUSH(:label4)
0x1BB	PUSH(SLOAD(0x4))
0x1BC	DUP2
0x1BD	JUMP(POP(:label4))

:label14
# Stack: [@0x13]
0x1BF	PUSH(:label16)

:label15
# Stack: [[:label17 | :label16] [:label16 | @0x13]]
0x1C3	PUSH(0x0)
0x1D3	JUMPI(:label22, CALLVALUE() == 0x4563918244F40000)

# Stack: [0x0 [:label17 | :label16] [:label16 | @0x13]]
0x1D6	PUSH(MLOAD(0x40))
0x1E0	PUSH(CALLER() & 0x2 ** 0xA0 - 0x1)
0x1E1	SWAP1
0x1E2	DUP3
0x1E3	SWAP1
0x1E4	PUSH(CALLVALUE())
0x1E5	SWAP1
0x1E6	DUP3
0x1E7	DUP2
0x1E8	DUP2
0x1E9	DUP2
0x1EA	DUP6
0x1EB	DUP9
0x1EC	DUP4
0x1ED	PUSH(CALL(POP(0x0), POP(@0x1E0), POP(@0x1E4), POP(@0x1D6), POP(0x0), POP(@0x1D6), POP(0x0)))
0x1EE	SWAP4
0x1EF	POP()
0x1F0	POP()
0x1F1	POP()
0x1F2	POP()
0x1F3	POP()
0x1F7	JUMP(:label21)

:label16
# Stack: []
0x1F9	STOP()

:label17
# Stack: [[:label16 | :label16]]
0x1FB	JUMP(POP())

:label18
# Stack: [[@0x199 | @0x187] [:label18 | :label18] @0x13]
0x1FD	PUSH(0x40)
0x1FF	DUP1
0x200	PUSH(MLOAD(POP(0x40)))
0x208	PUSH(0x2 ** 0xA0 - 0x1)
0x209	SWAP3
0x20A	SWAP1
0x20B	SWAP3
0x20D	DUP2
0x20E	MSTORE(POP(@0x200), POP(@0x208) & POP())
0x20F	PUSH(MLOAD(POP(0x40)))
0x210	SWAP1
0x211	DUP2
0x212	SWAP1
0x216	PUSH(0x20 + POP(@0x200) - POP(@0x20F))
0x217	SWAP1
0x218	RETURN(POP(@0x20F), POP(@0x216))

:label19
# Stack: [@0x237 [:label17 | :label16] [@0x13 | :label16]]
0x21F	SSTORE(0x1, SLOAD(0x2))

:label20
# Stack: [@0x237 [:label17 | :label16] [:label16 | @0x13]]
0x22E	SSTORE(0x4, BALANCE(0x2 ** 0xA0 - 0x1 & ADDRESS()))

:label21
# Stack: [[0x0 | @0x237 | @0xB2] [:label16 | :label17 | :label16] [:label16 | @0x13]]
0x230	POP()
0x231	JUMP(POP())

:label22
# Stack: [0x0 [:label16 | :label17] [:label16 | @0x13]]
0x233	POP()
0x234	PUSH(0x0)
0x236	DUP1
0x237	PUSH(SLOAD(POP(0x0)))
0x23A	DUP1
0x23B	PUSH(POP(@0x237) + 0x1)
0x23C	DUP1
0x23D	DUP4
0x23E	SSTORE(POP(0x0), POP(@0x23B))
0x23F	SWAP1
0x240	SWAP2
0x241	DUP2
0x242	DUP4
0x243	DUP1
0x244	PUSH(!POP(@0x237))
0x245	DUP2
0x246	SWAP1
0x24B	JUMPI(:label24, POP(@0x244) > POP(@0x23B))

# Stack: [@0x237 @0x23B 0x0 @0x23B @0x237 [:label16 | :label17] [:label16 | @0x13]]
0x24C	DUP2
0x24D	DUP4
0x250	MSTORE(0x0, POP(0x0))
0x255	PUSH(SHA3(0x0, 0x20))
0x256	SWAP2
0x257	DUP3
0x258	PUSH(POP(@0x255) + POP(@0x237))
0x259	SWAP2
0x25A	PUSH(POP(@0x255) + POP(@0x23B))
0x25B	PUSH(:label24)
0x25E	SWAP2
0x25F	SWAP1

:label23
# Stack: [[@0x25A | @0x279] @0x258 :label24 @0x23B 0x0 @0x23B @0x237 [:label17 | :label16] [:label16 | @0x13]]
0x261	DUP1
0x262	DUP3
0x268	JUMPI(:label25, !(POP(@0x258) > POP()))

# Stack: [[@0x25A | @0x279] @0x258 :label24 @0x23B 0x0 @0x23B @0x237 [:label17 | :label16] [:label16 | @0x13]]
0x269	DUP1
0x275	DUP1
0x276	SSTORE(POP(), ~(0x2 ** 0xA0 - 0x1) & SLOAD(POP()))
0x279	PUSH(0x1 + POP())
0x27D	JUMP(:label23)

:label24
# Stack: [[@0x258 | @0x237] @0x23B 0x0 @0x23B @0x237 [:label17 | :label16] [:label16 | @0x13]]
0x27F	POP()
0x280	POP()
0x281	POP()
0x282	POP()
0x283	PUSH(CALLER())
0x284	PUSH(0x0)
0x288	POP(0x0)
0x289	DUP3
0x28A	DUP2
0x28C	DUP1
0x292	JUMPI(0x2, !(POP(@0x237) < SLOAD(POP(0x0))))

# Stack: [@0x237 0x0 @0x283 @0x237 [:label17 | :label16] [:label16 | @0x13]]
0x293	DUP2
0x294	DUP1
0x295	MSTORE(POP(0x0), POP(0x0))
0x2B7	PUSH(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 + POP(@0x237))
0x2B8	DUP1
0x2C3	PUSH(~(0x2 ** 0xA0 - 0x1) & SLOAD(POP(@0x2B7)))
0x2C4	SWAP1
0x2C5	SWAP3
0x2C6	PUSH(POP(@0x283) | POP(@0x2C3))
0x2C7	SWAP1
0x2C8	SWAP2
0x2C9	SSTORE(POP(@0x2B7), POP(@0x2C6))
0x2CC	PUSH(SLOAD(0x5))
0x2CF	PUSH(MLOAD(0x40))
0x2D7	PUSH(0x2 ** 0xA0 - 0x1)
0x2D8	SWAP1
0x2D9	SWAP1
0x2DA	SWAP2
0x2DB	PUSH(POP(@0x2D7) & POP(@0x2CC))
0x2DC	SWAP2
0x2DD	SWAP1
0x2E1	PUSH(CALLVALUE() / 0xA)
0x2E2	SWAP1
0x2E3	DUP3
0x2E4	DUP2
0x2E5	DUP2
0x2E6	DUP2
0x2E7	DUP6
0x2E8	DUP9
0x2E9	DUP4
0x2EA	PUSH(CALL(POP(0x0), POP(@0x2DB), POP(@0x2E1), POP(@0x2CF), POP(0x0), POP(@0x2CF), POP(0x0)))
0x2EB	POP()
0x2EC	POP()
0x2ED	POP()
0x2FB	SSTORE(0x4, BALANCE(0x2 ** 0xA0 - 0x1 & ADDRESS()))
0x2FF	SSTORE(0x2, TIMESTAMP())
0x300	DUP3
0x302	PUSH(!(POP(@0x237) == POP(0x0)))
0x303	SWAP1
0x304	POP()
0x308	JUMPI(:label26, POP(@0x302))

# Stack: [@0x237 [:label17 | :label16] [:label16 | @0x13]]
0x30C	SSTORE(0x1, TIMESTAMP())
0x310	JUMP(:label21)

:label25
# Stack: [[@0x279 | @0x25A] @0x258 :label24 @0x23B 0x0 @0x23B @0x237 [:label17 | :label16] [:label16 | @0x13]]
0x312	POP()
0x313	SWAP1
0x314	JUMP(POP(:label24))

:label26
# Stack: [@0x237 [:label17 | :label16] [@0x13 | :label16]]
0x318	PUSH(SLOAD(0x2))
0x31C	PUSH(0x15180)
0x320	SWAP1
0x327	JUMPI(:label19, !(POP(@0x318) - SLOAD(0x1) > POP(0x15180)))

# Stack: [@0x237 [:label16 | :label17] [:label16 | @0x13]]
0x328	PUSH(0x0)
0x32A	DUP1
0x32B	PUSH(SLOAD(POP(0x0)))
0x32F	DUP2
0x330	PUSH(POP(@0x237) + ~0x0)
0x331	SWAP1
0x332	DUP2
0x338	JUMPI(0x2, !(POP(@0x330) < POP(@0x32B)))

# Stack: [@0x330 0x0 @0x237 [:label17 | :label16] [:label16 | @0x13]]
0x339	DUP2
0x33A	DUP1
0x33B	MSTORE(POP(0x0), POP(0x0))
0x35D	PUSH(0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 + POP(@0x330))
0x35E	SWAP1
0x35F	POP()
0x362	PUSH(MLOAD(0x40))
0x363	SWAP1
0x364	PUSH(SLOAD(POP(@0x35D)))
0x36C	PUSH(0x2 ** 0xA0 - 0x1)
0x36D	SWAP1
0x36E	DUP2
0x36F	PUSH(POP(@0x36C) & POP(@0x364))
0x370	SWAP2
0x371	PUSH(0x0)
0x373	SWAP2
0x381	PUSH(~0x4563918244F3FFFF + BALANCE(ADDRESS() & POP(@0x36C)))
0x382	SWAP1
0x383	DUP3
0x384	DUP2
0x385	DUP2
0x386	DUP2
0x387	DUP6
0x388	DUP9
0x389	DUP4
0x38A	PUSH(CALL(POP(0x0), POP(@0x36F), POP(@0x381), POP(@0x362), POP(0x0), POP(@0x362), POP(0x0)))
0x38B	POP()
0x38C	POP()
0x392	SSTORE(0x1, SLOAD(0x2))
0x393	POP()
0x394	PUSH(:label20)
0x397	SWAP2
0x398	POP()
0x399	POP()
0x39A	JUMP(POP(:label20))


